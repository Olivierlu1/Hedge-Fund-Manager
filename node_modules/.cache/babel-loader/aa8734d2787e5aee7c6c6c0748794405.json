{"ast":null,"code":"import _classCallCheck from \"/Users/olivier/Downloads/Hedge-Fund-Manager-Official/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/olivier/Downloads/Hedge-Fund-Manager-Official/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/olivier/Downloads/Hedge-Fund-Manager-Official/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/olivier/Downloads/Hedge-Fund-Manager-Official/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/olivier/Downloads/Hedge-Fund-Manager-Official/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/olivier/Downloads/Hedge-Fund-Manager-Official/src/Investment.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { addNetWorth, subtractNetWorth, addEvent } from \"./actions/index\";\nimport { castToDollar, getColorArrow } from './functions';\nimport { boughtTechStock, soldTechStock } from './actions/stocks/TechStock';\nimport { boughtCryptoStock, soldCryptoStock } from './actions/stocks/CryptoStock';\nimport { boughtClothingStock, soldClothingStock } from './actions/stocks/ClothingStock';\nimport { boughtPharmaStock, soldPharmaStock } from './actions/stocks/PharmaStock';\nimport { boughtFoodStock, soldFoodStock } from './actions/stocks/FoodStock';\nimport { Table, Tab, Form, Input, Message, Button, Icon, Modal, Grid } from \"semantic-ui-react\";\nimport update from 'immutability-helper';\nimport { Link } from 'react-router-dom';\nimport ReactChartkick, { LineChart } from 'react-chartkick';\nimport Chart from 'chart.js';\nReactChartkick.addAdapter(Chart); // TODO: Have seperate state variables for every input \n// Have specific error messages for each sector\n// Add event messages for buy / sell all\n\nvar Investment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Investment, _Component);\n\n  function Investment() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Investment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Investment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      buy: {\n        1: \"\",\n        2: \"\",\n        3: \"\",\n        4: \"\",\n        5: \"\"\n      },\n      sell: {\n        1: \"\",\n        2: \"\",\n        3: \"\",\n        4: \"\",\n        5: \"\"\n      },\n      errorMessage: \"\",\n      errorHeader: \"\",\n      error: false,\n      open: false,\n      stock: \"\",\n      type: \"\"\n    };\n\n    _this.buyAll = function (stock) {\n      return function (event) {\n        event.preventDefault();\n        var _this$props = _this.props,\n            techStock = _this$props.techStock,\n            pharmaStock = _this$props.pharmaStock,\n            foodStock = _this$props.foodStock,\n            clothingStock = _this$props.clothingStock,\n            cryptoStock = _this$props.cryptoStock;\n        var netWorth = _this.props.stats.netWorth;\n\n        if (stock === \"apple\" || stock === \"microsoft\" || stock === \"facebook\" || stock === \"google\" || stock === \"dropbox\") {\n          var amount = Math.floor(netWorth / techStock[stock].price);\n\n          _this.props.boughtTechStock(stock, amount);\n\n          var totalCost = amount * techStock[stock].price;\n\n          _this.props.subtractNetWorth(totalCost);\n\n          if (amount > 0) {\n            if (stock === \"apple\") {\n              _this.props.addEvent({\n                title: \"Purchased Pear Stock\",\n                description: \"Purchased \".concat(amount, \" shares at $\").concat(castToDollar(techStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"google\") {\n              _this.props.addEvent({\n                title: \"Purchased Googol Stock\",\n                description: \"Purchased \".concat(amount, \" shares at $\").concat(castToDollar(techStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"microsoft\") {\n              _this.props.addEvent({\n                title: \"Purchased Wicrodoft Stock\",\n                description: \"Purchased \".concat(amount, \" shares at $\").concat(castToDollar(techStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"dropbox\") {\n              _this.props.addEvent({\n                title: \"Purchased Boxdrop Stock\",\n                description: \"Purchased \".concat(amount, \" shares at $\").concat(castToDollar(techStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"facebook\") {\n              _this.props.addEvent({\n                title: \"Purchased Facenovel Stock\",\n                description: \"Purchased \".concat(amount, \" shares at $\").concat(castToDollar(techStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            }\n          }\n        } else if (stock === \"cargill\" || stock === \"nestle\" || stock === \"pepsi\" || stock === \"archer\" || stock === \"sysco\") {\n          var _amount = Math.floor(netWorth / foodStock[stock].price);\n\n          _this.props.boughtFoodStock(stock, _amount);\n\n          var totalCost1 = _amount * foodStock[stock].price;\n\n          _this.props.subtractNetWorth(totalCost1);\n\n          if (_amount > 0) {\n            if (stock === \"cargill\") {\n              _this.props.addEvent({\n                title: \"Purchased Cardgill Stock\",\n                description: \"Purchased \".concat(_amount, \" shares at $\").concat(castToDollar(foodStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost1))\n              });\n            } else if (stock === \"nestle\") {\n              _this.props.addEvent({\n                title: \"Purchased Nestel Stock\",\n                description: \"Purchased \".concat(_amount, \" shares at $\").concat(castToDollar(foodStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost1))\n              });\n            } else if (stock === \"pepsi\") {\n              _this.props.addEvent({\n                title: \"Purchased Pepsico Stock\",\n                description: \"Purchased \".concat(_amount, \" shares at $\").concat(castToDollar(foodStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost1))\n              });\n            } else if (stock === \"archer\") {\n              _this.props.addEvent({\n                title: \"Purchased Cooca-Coola Stock\",\n                description: \"Purchased \".concat(_amount, \" shares at $\").concat(castToDollar(foodStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost1))\n              });\n            } else if (stock === \"sysco\") {\n              _this.props.addEvent({\n                title: \"Purchased Sisco Stock\",\n                description: \"Purchased \".concat(_amount, \" shares at $\").concat(castToDollar(foodStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost1))\n              });\n            }\n          }\n        } else if (stock === \"pfizer\" || stock === \"novartis\" || stock === \"hoffmann\" || stock === \"merck\" || stock === \"johnson\") {\n          var _amount2 = Math.floor(netWorth / pharmaStock[stock].price);\n\n          _this.props.boughtPharmaStock(stock, _amount2);\n\n          var totalCost2 = _amount2 * pharmaStock[stock].price;\n\n          _this.props.subtractNetWorth(totalCost2);\n\n          if (_amount2 > 0) {\n            if (stock === \"pfizer\") {\n              _this.props.addEvent({\n                title: \"Purchased Fizzer Stock\",\n                description: \"Purchased \".concat(_amount2, \" shares at $\").concat(castToDollar(pharmaStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost2))\n              });\n            } else if (stock === \"novartis\") {\n              _this.props.addEvent({\n                title: \"Purchased MedicinePlus Stock\",\n                description: \"Purchased \".concat(_amount2, \" shares at $\").concat(castToDollar(pharmaStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost2))\n              });\n            } else if (stock === \"hoffmann\") {\n              _this.props.addEvent({\n                title: \"Purchased Hofman-LaRose Stock\",\n                description: \"Purchased \".concat(_amount2, \" shares at $\").concat(castToDollar(pharmaStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost2))\n              });\n            } else if (stock === \"merck\") {\n              _this.props.addEvent({\n                title: \"Purchased Murck & Co. Stock\",\n                description: \"Purchased \".concat(_amount2, \" shares at $\").concat(castToDollar(pharmaStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost2))\n              });\n            } else if (stock === \"johnson\") {\n              _this.props.addEvent({\n                title: \"Purchased Johnny & Johnny Stock\",\n                description: \"Purchased \".concat(_amount2, \" shares at $\").concat(castToDollar(pharmaStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost2))\n              });\n            }\n          }\n        } else if (stock === \"dior\" || stock === \"nike\" || stock === \"adidas\" || stock === \"gucci\" || stock === \"hermes\") {\n          var _amount3 = Math.floor(netWorth / clothingStock[stock].price);\n\n          var totalCost3;\n\n          if (_amount3 != 0) {\n            _this.props.boughtClothingStock(stock, _amount3);\n\n            totalCost3 = _amount3 * clothingStock[stock].price;\n\n            _this.props.subtractNetWorth(totalCost3);\n          }\n\n          if (_amount3 > 0) {\n            if (stock === \"dior\") {\n              _this.props.addEvent({\n                title: \"Purchased Doir Stock\",\n                description: \"Purchased \".concat(_amount3, \" shares at $\").concat(castToDollar(clothingStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost3))\n              });\n            } else if (stock === \"nike\") {\n              _this.props.addEvent({\n                title: \"Purchased Nikke Stock\",\n                description: \"Purchased \".concat(_amount3, \" shares at $\").concat(castToDollar(clothingStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost3))\n              });\n            } else if (stock === \"adidas\") {\n              _this.props.addEvent({\n                title: \"Purchased Addiddas Stock\",\n                description: \"Purchased \".concat(_amount3, \" shares at $\").concat(castToDollar(clothingStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost3))\n              });\n            } else if (stock === \"gucci\") {\n              _this.props.addEvent({\n                title: \"Purchased Guchi Stock\",\n                description: \"Purchased \".concat(_amount3, \" shares at $\").concat(castToDollar(clothingStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost3))\n              });\n            } else if (stock === \"hermes\") {\n              _this.props.addEvent({\n                title: \"Purchased Harmes Stock\",\n                description: \"Purchased \".concat(_amount3, \" shares at $\").concat(castToDollar(clothingStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost3))\n              });\n            }\n          }\n        } else if (stock === \"eos\" || stock === \"xrp\" || stock === \"bitcoin\" || stock === \"tron\" || stock === \"ethereum\") {\n          var _amount4 = Math.floor(netWorth / cryptoStock[stock].price);\n\n          _this.props.boughtCryptoStock(stock, _amount4);\n\n          var totalCost4 = _amount4 * cryptoStock[stock].price;\n\n          _this.props.subtractNetWorth(totalCost4);\n\n          if (_amount4 > 0) {\n            if (stock === \"eos\") {\n              _this.props.addEvent({\n                title: \"Purchased EOS\",\n                description: \"Purchased \".concat(_amount4, \" EOS at $\").concat(castToDollar(cryptoStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost4))\n              });\n            } else if (stock === \"xrp\") {\n              _this.props.addEvent({\n                title: \"Purchased XRP\",\n                description: \"Purchased \".concat(_amount4, \" XRP at $\").concat(castToDollar(cryptoStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost4))\n              });\n            } else if (stock === \"bitcoin\") {\n              _this.props.addEvent({\n                title: \"Purchased Bitcoin\",\n                description: \"Purchased \".concat(_amount4, \" Bitcoin at $\").concat(castToDollar(cryptoStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost4))\n              });\n            } else if (stock === \"tron\") {\n              _this.props.addEvent({\n                title: \"Purchased Tron\",\n                description: \"Purchased \".concat(_amount4, \" TRON at $\").concat(castToDollar(cryptoStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost4))\n              });\n            } else if (stock === \"ethereum\") {\n              _this.props.addEvent({\n                title: \"Purchased Ethereum\",\n                description: \"Purchased \".concat(_amount4, \" Ether at $\").concat(castToDollar(cryptoStock[stock].price), \" for a total of $\").concat(castToDollar(totalCost4))\n              });\n            }\n          }\n        }\n      };\n    };\n\n    _this.sellAll = function (stock) {\n      return function (event) {\n        event.preventDefault();\n        var _this$props2 = _this.props,\n            techStock = _this$props2.techStock,\n            pharmaStock = _this$props2.pharmaStock,\n            foodStock = _this$props2.foodStock,\n            clothingStock = _this$props2.clothingStock,\n            cryptoStock = _this$props2.cryptoStock;\n        var netWorth = _this.props.stats.netWorth;\n\n        if (stock === \"apple\" || stock === \"microsoft\" || stock === \"facebook\" || stock === \"google\" || stock === \"dropbox\") {\n          var amount = techStock[stock].sharesOwned;\n\n          _this.props.soldTechStock(stock, amount);\n\n          var totalCost = amount * techStock[stock].price;\n\n          _this.props.addNetWorth(totalCost);\n\n          if (amount > 0) {\n            if (stock === \"apple\") {\n              _this.props.addEvent({\n                title: \"Sold Pear Stock\",\n                description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"google\") {\n              _this.props.addEvent({\n                title: \"Sold Googol Stock\",\n                description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"microsoft\") {\n              _this.props.addEvent({\n                title: \"Sold Wicrodoft Stock\",\n                description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"dropbox\") {\n              _this.props.addEvent({\n                title: \"Sold Boxdrop Stock\",\n                description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"facebook\") {\n              _this.props.addEvent({\n                title: \"Sold Facenovel Stock\",\n                description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            }\n          }\n        } else if (stock === \"cargill\" || stock === \"nestle\" || stock === \"pepsi\" || stock === \"archer\" || stock === \"sysco\") {\n          var _amount5 = foodStock[stock].sharesOwned;\n\n          _this.props.soldFoodStock(stock, _amount5);\n\n          var totalCost = _amount5 * foodStock[stock].price;\n\n          _this.props.addNetWorth(totalCost);\n\n          if (_amount5 > 0) {\n            if (stock === \"cargill\") {\n              _this.props.addEvent({\n                title: \"Sold Cardgill Stock\",\n                description: \"Sold \".concat(_amount5, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"nestle\") {\n              _this.props.addEvent({\n                title: \"Sold Nestel Stock\",\n                description: \"Sold \".concat(_amount5, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"pepsi\") {\n              _this.props.addEvent({\n                title: \"Sold Pepsico Stock\",\n                description: \"Sold \".concat(_amount5, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"archer\") {\n              _this.props.addEvent({\n                title: \"Sold Cooca-Coola Stock\",\n                description: \"Sold \".concat(_amount5, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"sysco\") {\n              _this.props.addEvent({\n                title: \"Sold Sisco Stock\",\n                description: \"Sold \".concat(_amount5, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            }\n          }\n        } else if (stock === \"pfizer\" || stock === \"novartis\" || stock === \"hoffmann\" || stock === \"merck\" || stock === \"johnson\") {\n          var _amount6 = pharmaStock[stock].sharesOwned;\n\n          _this.props.soldPharmaStock(stock, _amount6);\n\n          var totalCost = _amount6 * pharmaStock[stock].price;\n\n          _this.props.addNetWorth(totalCost);\n\n          if (_amount6 > 0) {\n            if (stock === \"pfizer\") {\n              _this.props.addEvent({\n                title: \"Sold Fizzer Stock\",\n                description: \"Sold \".concat(_amount6, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"novartis\") {\n              _this.props.addEvent({\n                title: \"Sold MedicinePlus Stock\",\n                description: \"Sold \".concat(_amount6, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"hoffmann\") {\n              _this.props.addEvent({\n                title: \"Sold Hofman-LaRose Stock\",\n                description: \"Sold \".concat(_amount6, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"merck\") {\n              _this.props.addEvent({\n                title: \"Sold Murck & Co. Stock\",\n                description: \"Sold \".concat(_amount6, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"johnson\") {\n              _this.props.addEvent({\n                title: \"Sold Johnny & Johnny Stock\",\n                description: \"Sold \".concat(_amount6, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            }\n          }\n        } else if (stock === \"dior\" || stock === \"nike\" || stock === \"adidas\" || stock === \"gucci\" || stock === \"hermes\") {\n          var _amount7 = clothingStock[stock].sharesOwned;\n\n          _this.props.soldClothingStock(stock, _amount7);\n\n          var totalCost = _amount7 * clothingStock[stock].price;\n\n          _this.props.addNetWorth(totalCost);\n\n          if (_amount7 > 0) {\n            if (stock === \"dior\") {\n              _this.props.addEvent({\n                title: \"Sold Doir Stock\",\n                description: \"Sold \".concat(_amount7, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"nike\") {\n              _this.props.addEvent({\n                title: \"Sold Nikke Stock\",\n                description: \"Sold \".concat(_amount7, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"adidas\") {\n              _this.props.addEvent({\n                title: \"Sold Addiddas Stock\",\n                description: \"Sold \".concat(_amount7, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"gucci\") {\n              _this.props.addEvent({\n                title: \"Sold Guchi Stock\",\n                description: \"Sold \".concat(_amount7, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"hermes\") {\n              _this.props.addEvent({\n                title: \"Sold Harmes Stock\",\n                description: \"Sold \".concat(_amount7, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            }\n          }\n        } else if (stock === \"eos\" || stock === \"xrp\" || stock === \"bitcoin\" || stock === \"tron\" || stock === \"ethereum\") {\n          var _amount8 = cryptoStock[stock].sharesOwned;\n\n          _this.props.soldCryptoStock(stock, _amount8);\n\n          var totalCost = _amount8 * cryptoStock[stock].price;\n\n          _this.props.addNetWorth(totalCost);\n\n          if (_amount8 > 0) {\n            if (stock === \"eos\") {\n              _this.props.addEvent({\n                title: \"Purchased EOS\",\n                description: \"Purchased \".concat(_amount8, \" EOS at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"xrp\") {\n              _this.props.addEvent({\n                title: \"Purchased XRP\",\n                description: \"Purchased \".concat(_amount8, \" XRP at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"bitcoin\") {\n              _this.props.addEvent({\n                title: \"Purchased Bitcoin\",\n                description: \"Purchased \".concat(_amount8, \" Bitcoin at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"tron\") {\n              _this.props.addEvent({\n                title: \"Purchased Tron\",\n                description: \"Purchased \".concat(_amount8, \" TRON at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            } else if (stock === \"ethereum\") {\n              _this.props.addEvent({\n                title: \"Purchased Ethereum\",\n                description: \"Purchased \".concat(_amount8, \" Ether at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n              });\n            }\n          }\n        }\n      };\n    };\n\n    _this.onSubmitBuy = function (number, stock, amount) {\n      return function (event) {\n        event.preventDefault();\n\n        if (isNaN(amount) || amount === \"\" || amount < 1) {\n          _this.setState({\n            error: true,\n            errorHeader: \"Invalid Input\",\n            errorMessage: \"Please enter a valid number\"\n          });\n        } else {\n          _this.setState({\n            error: false,\n            errorMessage: \"\"\n          });\n\n          var _this$props3 = _this.props,\n              techStock = _this$props3.techStock,\n              pharmaStock = _this$props3.pharmaStock,\n              foodStock = _this$props3.foodStock,\n              clothingStock = _this$props3.clothingStock,\n              cryptoStock = _this$props3.cryptoStock;\n\n          switch (stock) {\n            case \"apple\":\n              var totalCost = parseInt(_this.state.buy[number]) * techStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtTechStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Pear Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"google\":\n              totalCost = parseInt(_this.state.buy[number]) * techStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtTechStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Googol Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"microsoft\":\n              totalCost = parseInt(_this.state.buy[number]) * techStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtTechStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Wicrodoft Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"facebook\":\n              totalCost = parseInt(_this.state.buy[number]) * techStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtTechStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Facenovel Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"dropbox\":\n              totalCost = parseInt(_this.state.buy[number]) * techStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtTechStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Boxdrop Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"pfizer\":\n              totalCost = parseInt(_this.state.buy[number]) * pharmaStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtPharmaStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Fizzer Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"novartis\":\n              totalCost = parseInt(_this.state.buy[number]) * pharmaStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtPharmaStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased MedicinePlus Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"hoffmann\":\n              totalCost = parseInt(_this.state.buy[number]) * pharmaStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtPharmaStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Hofman-LaRose Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"merck\":\n              totalCost = parseInt(_this.state.buy[number]) * pharmaStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtPharmaStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Murck & Co. Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"johnson\":\n              totalCost = parseInt(_this.state.buy[number]) * pharmaStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtPharmaStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Johnny & Johnny Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"cargill\":\n              totalCost = parseInt(_this.state.buy[number]) * foodStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtFoodStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Cardgill Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"nestle\":\n              totalCost = parseInt(_this.state.buy[number]) * foodStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtFoodStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Nestel Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"pepsi\":\n              totalCost = parseInt(_this.state.buy[number]) * foodStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtFoodStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased PepisCo Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"archer\":\n              totalCost = parseInt(_this.state.buy[number]) * foodStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtFoodStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Cooca-Coola Company Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"sysco\":\n              totalCost = parseInt(_this.state.buy[number]) * foodStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtFoodStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Sisco Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"dior\":\n              totalCost = parseInt(_this.state.buy[number]) * clothingStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtClothingStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Doir Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"nike\":\n              totalCost = parseInt(_this.state.buy[number]) * clothingStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtClothingStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Nikke Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"adidas\":\n              totalCost = parseInt(_this.state.buy[number]) * clothingStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtClothingStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Addiddas Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"gucci\":\n              totalCost = parseInt(_this.state.buy[number]) * clothingStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtClothingStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Guchi Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"hermes\":\n              totalCost = parseInt(_this.state.buy[number]) * clothingStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtClothingStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Harmes Stock\",\n                  description: \"Purchased \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"eos\":\n              totalCost = parseInt(_this.state.buy[number]) * cryptoStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtCryptoStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased EOS\",\n                  description: \"Purchased \".concat(amount, \" EOS at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"tron\":\n              totalCost = parseInt(_this.state.buy[number]) * cryptoStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtCryptoStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased TRON\",\n                  description: \"Purchased \".concat(amount, \" TRON at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"xrp\":\n              totalCost = parseInt(_this.state.buy[number]) * cryptoStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtCryptoStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased XRP\",\n                  description: \"Purchased \".concat(amount, \" XRP at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"bitcoin\":\n              totalCost = parseInt(_this.state.buy[number]) * cryptoStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtCryptoStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Bitcoin\",\n                  description: \"Purchased \".concat(amount, \" Bitcoin at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            case \"ethereum\":\n              totalCost = parseInt(_this.state.buy[number]) * cryptoStock[stock].price;\n\n              if (totalCost > _this.props.stats.netWorth) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Funds\",\n                  errorMessage: \"You don't have enough money to purchase that!\"\n                });\n              } else {\n                _this.props.boughtCryptoStock(stock, parseInt(amount));\n\n                _this.props.subtractNetWorth(parseInt(_this.state.buy[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Purchased Ethereum\",\n                  description: \"Purchased \".concat(amount, \" Ether at $\").concat(cryptoStock[stock].price, \" for a total of $\").concat(castToDollar(totalCost))\n                });\n              }\n\n              break;\n\n            default:\n              console.log(\"Wtf just happened buy\");\n              break;\n          }\n\n          var newState = update(_this.state.buy, {\n            1: {\n              $set: ''\n            },\n            2: {\n              $set: ''\n            },\n            3: {\n              $set: ''\n            },\n            4: {\n              $set: ''\n            },\n            5: {\n              $set: ''\n            }\n          });\n\n          _this.setState({\n            buy: newState\n          });\n        }\n      };\n    };\n\n    _this.onSubmitSell = function (number, stock, amount) {\n      return function (event) {\n        event.preventDefault();\n\n        if (isNaN(amount) || amount === \"\" || amount < 1) {\n          _this.setState({\n            error: true,\n            errorHeader: \"Invalid Input\",\n            errorMessage: \"Please enter a valid number\"\n          });\n        } else {\n          _this.setState({\n            error: false,\n            errorMessage: \"\"\n          });\n\n          var _this$props4 = _this.props,\n              techStock = _this$props4.techStock,\n              pharmaStock = _this$props4.pharmaStock,\n              foodStock = _this$props4.foodStock,\n              clothingStock = _this$props4.clothingStock,\n              cryptoStock = _this$props4.cryptoStock;\n\n          switch (stock) {\n            case \"apple\":\n              if (amount > techStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldTechStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Pear Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * techStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"google\":\n              if (amount > techStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldTechStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Googol Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * techStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"microsoft\":\n              if (amount > techStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldTechStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Wicrodoft Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * techStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"facebook\":\n              if (amount > techStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldTechStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Facenovel Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * techStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"dropbox\":\n              if (amount > techStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldTechStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * techStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Boxdrop Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(techStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * techStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"pfizer\":\n              if (amount > pharmaStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldPharmaStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Fizzer Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * pharmaStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"novartis\":\n              if (amount > pharmaStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldPharmaStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold MedicinePlus Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * pharmaStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"hoffmann\":\n              if (amount > pharmaStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldPharmaStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Hofman-LaRose Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * pharmaStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"merck\":\n              if (amount > pharmaStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldPharmaStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Murck & Co. Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * pharmaStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"johnson\":\n              if (amount > pharmaStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldPharmaStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * pharmaStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Johnny & Johnny Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(pharmaStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * pharmaStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"cargill\":\n              if (amount > foodStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldFoodStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Cardgill Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * foodStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"nestle\":\n              if (amount > foodStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldFoodStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Nestel Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * foodStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"pepsi\":\n              if (amount > foodStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldFoodStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold PepisCo Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * foodStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"archer\":\n              if (amount > foodStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldFoodStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Cooca-Coola Company Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * foodStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"sysco\":\n              if (amount > foodStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldFoodStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * foodStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Sisco Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(foodStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * foodStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"dior\":\n              if (amount > clothingStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldClothingStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Doir Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * clothingStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"nike\":\n              if (amount > clothingStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldClothingStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Nikke Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * clothingStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"adidas\":\n              if (amount > clothingStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldClothingStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Addiddas Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * clothingStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"gucci\":\n              if (amount > clothingStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldClothingStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Guchi Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * clothingStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"hermes\":\n              if (amount > clothingStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Shares\",\n                  errorMessage: \"You don't have that many shares!\"\n                });\n              } else {\n                _this.props.soldClothingStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * clothingStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Harmes Stock\",\n                  description: \"Sold \".concat(amount, \" shares at $\").concat(clothingStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * clothingStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"eos\":\n              if (amount > cryptoStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Value\",\n                  errorMessage: \"You don't have that many EOS\"\n                });\n              } else {\n                _this.props.soldCryptoStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold EOS\",\n                  description: \"Sold \".concat(amount, \" EOS at $\").concat(cryptoStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * cryptoStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"tron\":\n              if (amount > cryptoStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Value\",\n                  errorMessage: \"You don't have that many TRON\"\n                });\n              } else {\n                _this.props.soldCryptoStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold TRON\",\n                  description: \"Sold \".concat(amount, \" TRON at $\").concat(cryptoStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * cryptoStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"xrp\":\n              if (amount > cryptoStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Value\",\n                  errorMessage: \"You don't have that many XRP\"\n                });\n              } else {\n                _this.props.soldCryptoStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold XRP\",\n                  description: \"Sold \".concat(amount, \" XRP at $\").concat(cryptoStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * cryptoStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"bitcoin\":\n              if (amount > cryptoStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Value\",\n                  errorMessage: \"You don't have that many Bitcoin\"\n                });\n              } else {\n                _this.props.soldCryptoStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Bitcoin\",\n                  description: \"Sold \".concat(amount, \" Bitcoin at $\").concat(cryptoStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * cryptoStock[stock].price)\n                });\n              }\n\n              break;\n\n            case \"ethereum\":\n              if (amount > cryptoStock[stock].sharesOwned) {\n                _this.setState({\n                  error: true,\n                  errorHeader: \"Insufficent Value\",\n                  errorMessage: \"You don't have that many Ether\"\n                });\n              } else {\n                _this.props.soldCryptoStock(stock, parseInt(amount));\n\n                _this.props.addNetWorth(parseInt(_this.state.sell[number]) * cryptoStock[stock].price);\n\n                _this.props.addEvent({\n                  title: \"Sold Ethereum\",\n                  description: \"Sold \".concat(amount, \" Ether at $\").concat(cryptoStock[stock].price, \" for a total profit of $\").concat(parseInt(_this.state.buy[number]) * cryptoStock[stock].price)\n                });\n              }\n\n              break;\n\n            default:\n              console.log(\"Wtf just happened\");\n              break;\n          }\n\n          var newState = update(_this.state.sell, {\n            1: {\n              $set: ''\n            },\n            2: {\n              $set: ''\n            },\n            3: {\n              $set: ''\n            },\n            4: {\n              $set: ''\n            },\n            5: {\n              $set: ''\n            }\n          });\n\n          _this.setState({\n            sell: newState\n          });\n        }\n      };\n    };\n\n    _this.handleClick = function (stock, type) {\n      return function (event) {\n        event.preventDefault();\n\n        _this.setState({\n          stock: stock,\n          type: type,\n          open: true\n        });\n      };\n    };\n\n    _this.close = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Investment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.stats.criminalLevel >= 100) {\n        this.props.history.push('/gameover');\n      }\n    }\n  }, {\n    key: \"renderTableCrypto\",\n    value: function renderTableCrypto() {\n      var _this2 = this;\n\n      var _this$props$cryptoSto = this.props.cryptoStock,\n          eos = _this$props$cryptoSto.eos,\n          xrp = _this$props$cryptoSto.xrp,\n          bitcoin = _this$props$cryptoSto.bitcoin,\n          tron = _this$props$cryptoSto.tron,\n          ethereum = _this$props$cryptoSto.ethereum;\n      var _this$props$cryptoPri = this.props.cryptoPrices,\n          eosPrices = _this$props$cryptoPri.eos,\n          xrpPrices = _this$props$cryptoPri.xrp,\n          bitcoinPrices = _this$props$cryptoPri.bitcoin,\n          tronPrices = _this$props$cryptoPri.tron,\n          ethereumPrices = _this$props$cryptoPri.ethereum;\n      var eosColor = getColorArrow(eos.price, this.props.cryptoPrices[\"eos\"]);\n      var xrpColor = getColorArrow(xrp.price, xrpPrices);\n      var bitcoinColor = getColorArrow(bitcoin.price, bitcoinPrices);\n      var tronColor = getColorArrow(tron.price, tronPrices);\n      var ethereumColor = getColorArrow(ethereum.price, ethereumPrices);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854\n        },\n        __self: this\n      }, this.state.error && React.createElement(Message, {\n        error: true,\n        header: this.state.errorHeader,\n        content: this.state.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 856\n        },\n        __self: this\n      }), React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862\n        },\n        __self: this\n      }, \"Company Name\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863\n        },\n        __self: this\n      }, \"Price\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864\n        },\n        __self: this\n      }, \"Shares Owned\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865\n        },\n        __self: this\n      }, \"Total Value\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 866\n        },\n        __self: this\n      }, \"Buy Shares\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867\n        },\n        __self: this\n      }, \"Sell Shares\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 871\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 873\n        },\n        __self: this\n      }, \"Bitcoin\"), React.createElement(Table.Cell, {\n        style: {\n          color: bitcoinColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874\n        },\n        __self: this\n      }, \"$\", castToDollar(bitcoin.price), \" \", bitcoinColor.arrow != \"\" ? React.createElement(Icon, {\n        name: bitcoinColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"bitcoin\", \"crypto\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 875\n        },\n        __self: this\n      }, bitcoin.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 876\n        },\n        __self: this\n      }, \"$\", castToDollar(bitcoin.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 877\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(3, \"bitcoin\", this.state.buy[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 878\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            buy: update(_this2.state.buy, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 879\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"bitcoin\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 890\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 892\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(3, \"bitcoin\", this.state.sell[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 893\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            sell: update(_this2.state.sell, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 894\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"bitcoin\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 905\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909\n        },\n        __self: this\n      }, \"Ethereum\"), React.createElement(Table.Cell, {\n        style: {\n          color: ethereumColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }, \"$\", castToDollar(ethereum.price), \" \", ethereumColor.arrow != \"\" ? React.createElement(Icon, {\n        name: ethereumColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"ethereum\", \"crypto\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911\n        },\n        __self: this\n      }, ethereum.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 912\n        },\n        __self: this\n      }, \"$\", castToDollar(ethereum.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 913\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(5, \"ethereum\", this.state.buy[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 914\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            buy: update(_this2.state.buy, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"ethereum\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 926\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(5, \"ethereum\", this.state.sell[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            sell: update(_this2.state.sell, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 930\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"ethereum\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 945\n        },\n        __self: this\n      }, \"EOS\"), React.createElement(Table.Cell, {\n        style: {\n          color: eosColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 946\n        },\n        __self: this\n      }, \"$\", castToDollar(eos.price), \" \", eosColor.arrow != \"\" ? React.createElement(Icon, {\n        name: eosColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 947\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 947\n        },\n        __self: this\n      }), React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"eos\", \"crypto\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 948\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 950\n        },\n        __self: this\n      }, eos.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 951\n        },\n        __self: this\n      }, \"$\", castToDollar(eos.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 952\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(1, \"eos\", this.state.buy[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 953\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            buy: update(_this2.state.buy, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 954\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"eos\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 965\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 967\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(1, \"eos\", this.state.sell[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            sell: update(_this2.state.sell, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"eos\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 985\n        },\n        __self: this\n      }, \"XRP\"), React.createElement(Table.Cell, {\n        style: {\n          color: xrpColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986\n        },\n        __self: this\n      }, \"$\", castToDollar(xrp.price), \" \", xrpColor.arrow != \"\" ? React.createElement(Icon, {\n        name: xrpColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986\n        },\n        __self: this\n      }), React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"xrp\", \"crypto\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 987\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 988\n        },\n        __self: this\n      }, xrp.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 989\n        },\n        __self: this\n      }, \"$\", castToDollar(xrp.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 990\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(2, \"xrp\", this.state.buy[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 991\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            buy: update(_this2.state.buy, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"xrp\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1003\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1005\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(2, \"xrp\", this.state.sell[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1006\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            sell: update(_this2.state.sell, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1007\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"xrp\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1018\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1021\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1022\n        },\n        __self: this\n      }, \"TRON\"), React.createElement(Table.Cell, {\n        style: {\n          color: tronColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023\n        },\n        __self: this\n      }, \"$\", castToDollar(tron.price), \" \", tronColor.arrow != \"\" ? React.createElement(Icon, {\n        name: tronColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"tron\", \"crypto\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1024\n        },\n        __self: this\n      }, tron.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1025\n        },\n        __self: this\n      }, \"$\", castToDollar(tron.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1026\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(4, \"tron\", this.state.buy[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1027\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            buy: update(_this2.state.buy, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1028\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"tron\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1039\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1041\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(4, \"tron\", this.state.sell[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1042\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            sell: update(_this2.state.sell, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1043\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"tron\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1054\n        },\n        __self: this\n      }, \"Sell All\"))))));\n    }\n  }, {\n    key: \"renderTableTech\",\n    value: function renderTableTech() {\n      var _this3 = this;\n\n      var _this$props$techStock = this.props.techStock,\n          apple = _this$props$techStock.apple,\n          google = _this$props$techStock.google,\n          microsoft = _this$props$techStock.microsoft,\n          facebook = _this$props$techStock.facebook,\n          dropbox = _this$props$techStock.dropbox;\n      var _this$props$techPrice = this.props.techPrices,\n          applePrices = _this$props$techPrice.apple,\n          googlePrices = _this$props$techPrice.google,\n          microsoftPrices = _this$props$techPrice.microsoft,\n          facebookPrices = _this$props$techPrice.facebook,\n          dropboxPrices = _this$props$techPrice.dropbox;\n      var techPrices = this.props.techPrices;\n      var appleColor = getColorArrow(apple.price, this.props.techPrices[\"apple\"]);\n      var dropboxColor = getColorArrow(dropbox.price, dropboxPrices);\n      var facebookColor = getColorArrow(facebook.price, facebookPrices);\n      var microsoftColor = getColorArrow(microsoft.price, microsoftPrices);\n      var googleColor = getColorArrow(google.price, googlePrices);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1091\n        },\n        __self: this\n      }, this.state.error && React.createElement(Message, {\n        error: true,\n        header: this.state.errorHeader,\n        content: this.state.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1093\n        },\n        __self: this\n      }), React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1096\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1097\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1098\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1099\n        },\n        __self: this\n      }, \"Company Name\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1100\n        },\n        __self: this\n      }, \"Price\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1101\n        },\n        __self: this\n      }, \"Shares Owned\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1102\n        },\n        __self: this\n      }, \"Total Value\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1103\n        },\n        __self: this\n      }, \"Buy Shares\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1104\n        },\n        __self: this\n      }, \"Sell Shares\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1108\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1109\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1110\n        },\n        __self: this\n      }, \"Pear\"), React.createElement(Table.Cell, {\n        style: {\n          color: appleColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1111\n        },\n        __self: this\n      }, \"$\", castToDollar(apple.price), \" \", appleColor.arrow != \"\" ? React.createElement(Icon, {\n        name: appleColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1112\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1112\n        },\n        __self: this\n      }), React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"apple\", \"tech\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1113\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1115\n        },\n        __self: this\n      }, apple.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116\n        },\n        __self: this\n      }, \"$\", castToDollar(apple.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1117\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(1, \"apple\", this.state.buy[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1118\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            buy: update(_this3.state.buy, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1119\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"apple\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1130\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1132\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(1, \"apple\", this.state.sell[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1133\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            sell: update(_this3.state.sell, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1134\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"apple\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1145\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1149\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1150\n        },\n        __self: this\n      }, \"Googol\"), React.createElement(Table.Cell, {\n        style: {\n          color: googleColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1151\n        },\n        __self: this\n      }, \"$\", castToDollar(google.price), \" \", googleColor.arrow != \"\" ? React.createElement(Icon, {\n        name: googleColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1151\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1151\n        },\n        __self: this\n      }), React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"google\", \"tech\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1152\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1153\n        },\n        __self: this\n      }, google.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1154\n        },\n        __self: this\n      }, \"$\", castToDollar(google.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1155\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(2, \"google\", this.state.buy[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1156\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            buy: update(_this3.state.buy, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1157\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"google\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1168\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1170\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(2, \"google\", this.state.sell[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1171\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            sell: update(_this3.state.sell, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1172\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"google\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1183\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1186\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1187\n        },\n        __self: this\n      }, \"Wicrodoft\"), React.createElement(Table.Cell, {\n        style: {\n          color: microsoftColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1188\n        },\n        __self: this\n      }, \"$\", castToDollar(microsoft.price), \" \", microsoftColor.arrow != \"\" ? React.createElement(Icon, {\n        name: microsoftColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1188\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1188\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"microsoft\", \"tech\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1188\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1189\n        },\n        __self: this\n      }, microsoft.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1190\n        },\n        __self: this\n      }, \"$\", castToDollar(microsoft.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1191\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(3, \"microsoft\", this.state.buy[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1192\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            buy: update(_this3.state.buy, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1193\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"microsoft\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1204\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1206\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(3, \"microsoft\", this.state.sell[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1207\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            sell: update(_this3.state.sell, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1208\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"microsoft\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1219\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1222\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1223\n        },\n        __self: this\n      }, \"Facenovel\"), React.createElement(Table.Cell, {\n        style: {\n          color: facebookColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1224\n        },\n        __self: this\n      }, \"$\", castToDollar(facebook.price), \" \", facebookColor.arrow != \"\" ? React.createElement(Icon, {\n        name: facebookColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1224\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1224\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"facebook\", \"tech\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1224\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1225\n        },\n        __self: this\n      }, facebook.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1226\n        },\n        __self: this\n      }, \"$\", castToDollar(facebook.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1227\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(4, \"facebook\", this.state.buy[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1228\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            buy: update(_this3.state.buy, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1229\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"facebook\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1240\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1242\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(4, \"facebook\", this.state.sell[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1243\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            sell: update(_this3.state.sell, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1244\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"facebook\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1255\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1258\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1259\n        },\n        __self: this\n      }, \"Boxdrop\"), React.createElement(Table.Cell, {\n        style: {\n          color: dropboxColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1260\n        },\n        __self: this\n      }, \"$\", castToDollar(dropbox.price), \" \", dropboxColor.arrow != \"\" ? React.createElement(Icon, {\n        name: dropboxColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1260\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1260\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"dropbox\", \"tech\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1260\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1261\n        },\n        __self: this\n      }, dropbox.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1262\n        },\n        __self: this\n      }, \"$\", castToDollar(dropbox.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1263\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(5, \"dropbox\", this.state.buy[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1264\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this3.setState({\n            buy: update(_this3.state.buy, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1265\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"dropbox\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1276\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1278\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(5, \"dropbox\", this.state.sell[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1279\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this3.setState({\n            sell: update(_this3.state.sell, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1280\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"dropbox\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1291\n        },\n        __self: this\n      }, \"Sell All\"))))));\n    }\n  }, {\n    key: \"renderTablePharma\",\n    value: function renderTablePharma() {\n      var _this4 = this;\n\n      var _this$props$pharmaSto = this.props.pharmaStock,\n          pfizer = _this$props$pharmaSto.pfizer,\n          novartis = _this$props$pharmaSto.novartis,\n          hoffmann = _this$props$pharmaSto.hoffmann,\n          merck = _this$props$pharmaSto.merck,\n          johnson = _this$props$pharmaSto.johnson;\n      var _this$props$pharmaPri = this.props.pharmaPrices,\n          pfizerPrices = _this$props$pharmaPri.pfizer,\n          novartisPrices = _this$props$pharmaPri.novartis,\n          hoffmannPrices = _this$props$pharmaPri.hoffmann,\n          merckPrices = _this$props$pharmaPri.merck,\n          johnsonPrices = _this$props$pharmaPri.johnson;\n      var pfizerColor = getColorArrow(pfizer.price, pfizerPrices);\n      var novartisColor = getColorArrow(novartis.price, novartisPrices);\n      var hoffmannColor = getColorArrow(hoffmann.price, hoffmannPrices);\n      var merckColor = getColorArrow(merck.price, merckPrices);\n      var johnsonColor = getColorArrow(johnson.price, johnsonPrices);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1325\n        },\n        __self: this\n      }, this.state.error && React.createElement(Message, {\n        error: true,\n        header: this.state.errorHeader,\n        content: this.state.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1327\n        },\n        __self: this\n      }), React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1329\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1330\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1331\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1332\n        },\n        __self: this\n      }, \"Company Name\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1333\n        },\n        __self: this\n      }, \"Price\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1334\n        },\n        __self: this\n      }, \"Shares Owned\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1335\n        },\n        __self: this\n      }, \"Total Value\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1336\n        },\n        __self: this\n      }, \"Buy Shares\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1337\n        },\n        __self: this\n      }, \"Sell Shares\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1341\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1342\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1343\n        },\n        __self: this\n      }, \"Fizzer\"), React.createElement(Table.Cell, {\n        style: {\n          color: pfizerColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1344\n        },\n        __self: this\n      }, \"$\", castToDollar(pfizer.price), \" \", pfizerColor.arrow != \"\" ? React.createElement(Icon, {\n        name: pfizerColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1344\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1344\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"pfizer\", \"pharma\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1344\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1345\n        },\n        __self: this\n      }, pfizer.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1346\n        },\n        __self: this\n      }, \"$\", castToDollar(pfizer.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1347\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(1, \"pfizer\", this.state.buy[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1348\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this4.setState({\n            buy: update(_this4.state.buy, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1349\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"pfizer\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1360\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1362\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(1, \"pfizer\", this.state.sell[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1363\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this4.setState({\n            sell: update(_this4.state.sell, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1364\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"pfizer\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1375\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1378\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1379\n        },\n        __self: this\n      }, \"MedicinePlus\"), React.createElement(Table.Cell, {\n        style: {\n          color: novartisColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1380\n        },\n        __self: this\n      }, \"$\", castToDollar(novartis.price), \" \", novartisColor.arrow != \"\" ? React.createElement(Icon, {\n        name: novartisColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1380\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1380\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"novartis\", \"pharma\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1380\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1381\n        },\n        __self: this\n      }, novartis.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1382\n        },\n        __self: this\n      }, \"$\", castToDollar(novartis.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1383\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(2, \"novartis\", this.state.buy[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1384\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this4.setState({\n            buy: update(_this4.state.buy, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1385\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"novartis\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1396\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1398\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(2, \"novartis\", this.state.sell[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1399\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this4.setState({\n            sell: update(_this4.state.sell, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1400\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"novartis\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1411\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1414\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1415\n        },\n        __self: this\n      }, \"Hofman-LaRose\"), React.createElement(Table.Cell, {\n        style: {\n          color: hoffmannColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416\n        },\n        __self: this\n      }, \"$\", castToDollar(hoffmann.price), \" \", hoffmannColor.arrow != \"\" ? React.createElement(Icon, {\n        name: hoffmannColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"hoffmann\", \"pharma\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416\n        },\n        __self: this\n      }, \"Price History\"), \" \"), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1417\n        },\n        __self: this\n      }, hoffmann.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1418\n        },\n        __self: this\n      }, \"$\", castToDollar(hoffmann.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1419\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(3, \"hoffmann\", this.state.buy[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1420\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this4.setState({\n            buy: update(_this4.state.buy, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1421\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"hoffmann\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1432\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1434\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(3, \"hoffmann\", this.state.sell[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1435\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this4.setState({\n            sell: update(_this4.state.sell, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1436\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"hoffmann\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1447\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1450\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1451\n        },\n        __self: this\n      }, \"Murck & Co.\"), React.createElement(Table.Cell, {\n        style: {\n          color: merckColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1452\n        },\n        __self: this\n      }, \"$\", castToDollar(merck.price), \" \", merckColor.arrow != \"\" ? React.createElement(Icon, {\n        name: merckColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1452\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1452\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"merck\", \"pharma\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1452\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1453\n        },\n        __self: this\n      }, merck.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1454\n        },\n        __self: this\n      }, \"$\", castToDollar(merck.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1455\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(4, \"merck\", this.state.buy[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1456\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this4.setState({\n            buy: update(_this4.state.buy, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1457\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"merck\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1468\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1470\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(4, \"merck\", this.state.sell[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1471\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this4.setState({\n            sell: update(_this4.state.sell, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1472\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"merck\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1483\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1486\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1487\n        },\n        __self: this\n      }, \"Johnny & Johnny\"), React.createElement(Table.Cell, {\n        style: {\n          color: johnsonColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1488\n        },\n        __self: this\n      }, \"$\", castToDollar(johnson.price), \" \", johnsonColor.arrow != \"\" ? React.createElement(Icon, {\n        name: johnsonColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1488\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1488\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"johnson\", \"pharma\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1488\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1489\n        },\n        __self: this\n      }, johnson.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1490\n        },\n        __self: this\n      }, \"$\", castToDollar(johnson.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1491\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(5, \"johnson\", this.state.buy[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1492\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this4.setState({\n            buy: update(_this4.state.buy, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1493\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"johnson\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1504\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1506\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(5, \"johnson\", this.state.sell[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1507\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this4.setState({\n            sell: update(_this4.state.sell, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1508\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"johnson\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1519\n        },\n        __self: this\n      }, \"Sell All\"))))));\n    }\n  }, {\n    key: \"renderTableClothing\",\n    value: function renderTableClothing() {\n      var _this5 = this;\n\n      var _this$props$clothingS = this.props.clothingStock,\n          dior = _this$props$clothingS.dior,\n          nike = _this$props$clothingS.nike,\n          adidas = _this$props$clothingS.adidas,\n          gucci = _this$props$clothingS.gucci,\n          hermes = _this$props$clothingS.hermes;\n      var _this$props$clothingP = this.props.clothingPrices,\n          diorPrices = _this$props$clothingP.dior,\n          nikePrices = _this$props$clothingP.nike,\n          adidasPrices = _this$props$clothingP.adidas,\n          gucciPrices = _this$props$clothingP.gucci,\n          hermesPrices = _this$props$clothingP.hermes;\n      var diorColor = getColorArrow(dior.price, diorPrices);\n      var nikeColor = getColorArrow(nike.price, nikePrices);\n      var adidasColor = getColorArrow(adidas.price, adidasPrices);\n      var gucciColor = getColorArrow(gucci.price, gucciPrices);\n      var hermesColor = getColorArrow(hermes.price, hermesPrices);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1554\n        },\n        __self: this\n      }, this.state.error && React.createElement(Message, {\n        error: true,\n        header: this.state.errorHeader,\n        content: this.state.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1556\n        },\n        __self: this\n      }), React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1559\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1560\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1561\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1562\n        },\n        __self: this\n      }, \"Company Name\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1563\n        },\n        __self: this\n      }, \"Price\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1564\n        },\n        __self: this\n      }, \"Shares Owned\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1565\n        },\n        __self: this\n      }, \"Total Value\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1566\n        },\n        __self: this\n      }, \"Buy Shares\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1567\n        },\n        __self: this\n      }, \"Sell Shares\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1571\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1572\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1573\n        },\n        __self: this\n      }, \"Doir\"), React.createElement(Table.Cell, {\n        style: {\n          color: diorColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1574\n        },\n        __self: this\n      }, \"$\", castToDollar(dior.price), \" \", diorColor.arrow != \"\" ? React.createElement(Icon, {\n        name: diorColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1574\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1574\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"dior\", \"clothing\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1574\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1575\n        },\n        __self: this\n      }, dior.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1576\n        },\n        __self: this\n      }, \"$\", castToDollar(dior.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1577\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(1, \"dior\", this.state.buy[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1578\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this5.setState({\n            buy: update(_this5.state.buy, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1579\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"dior\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1590\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1592\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(1, \"dior\", this.state.sell[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1593\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this5.setState({\n            sell: update(_this5.state.sell, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1594\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"dior\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1605\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1608\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1609\n        },\n        __self: this\n      }, \"Nikke\"), React.createElement(Table.Cell, {\n        style: {\n          color: nikeColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1610\n        },\n        __self: this\n      }, \"$\", castToDollar(nike.price), \" \", nikeColor.arrow != \"\" ? React.createElement(Icon, {\n        name: nikeColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1610\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1610\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"nike\", \"clothing\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1610\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1611\n        },\n        __self: this\n      }, nike.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1612\n        },\n        __self: this\n      }, \"$\", castToDollar(nike.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1613\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(2, \"nike\", this.state.buy[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1614\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this5.setState({\n            buy: update(_this5.state.buy, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1615\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"nike\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1626\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1628\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(2, \"nike\", this.state.sell[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1629\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this5.setState({\n            sell: update(_this5.state.sell, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1630\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"nike\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1641\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1644\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1645\n        },\n        __self: this\n      }, \"Addiddas\"), React.createElement(Table.Cell, {\n        style: {\n          color: adidasColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1646\n        },\n        __self: this\n      }, \"$\", castToDollar(adidas.price), \" \", adidasColor.arrow != \"\" ? React.createElement(Icon, {\n        name: adidasColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1646\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1646\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"adidas\", \"clothing\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1646\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1647\n        },\n        __self: this\n      }, adidas.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1648\n        },\n        __self: this\n      }, \"$\", castToDollar(adidas.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1649\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(3, \"adidas\", this.state.buy[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1650\n        },\n        __self: this\n      }, React.createElement(Input, {\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this5.setState({\n            buy: update(_this5.state.buy, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1651\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"adidas\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1661\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1663\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(3, \"adidas\", this.state.sell[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1664\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this5.setState({\n            sell: update(_this5.state.sell, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1665\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"adidas\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1676\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1679\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1680\n        },\n        __self: this\n      }, \"Guchi\"), React.createElement(Table.Cell, {\n        style: {\n          color: gucciColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1681\n        },\n        __self: this\n      }, \"$\", castToDollar(gucci.price), \" \", gucciColor.arrow != \"\" ? React.createElement(Icon, {\n        name: gucciColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1681\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1681\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"gucci\", \"clothing\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1681\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1682\n        },\n        __self: this\n      }, gucci.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1683\n        },\n        __self: this\n      }, \"$\", castToDollar(gucci.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1684\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(4, \"gucci\", this.state.buy[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1685\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this5.setState({\n            buy: update(_this5.state.buy, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1686\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"gucci\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1697\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1699\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(4, \"gucci\", this.state.sell[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1700\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this5.setState({\n            sell: update(_this5.state.sell, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1701\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"gucci\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1712\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1715\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1716\n        },\n        __self: this\n      }, \"Harmes\"), React.createElement(Table.Cell, {\n        style: {\n          color: hermesColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1717\n        },\n        __self: this\n      }, \"$\", castToDollar(hermes.price), \" \", hermesColor.arrow != \"\" ? React.createElement(Icon, {\n        name: hermesColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1717\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1717\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"hermes\", \"clothing\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1717\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1718\n        },\n        __self: this\n      }, hermes.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1719\n        },\n        __self: this\n      }, \"$\", castToDollar(hermes.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1720\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(5, \"hermes\", this.state.buy[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1721\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this5.setState({\n            buy: update(_this5.state.buy, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1722\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"hermes\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1733\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1735\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(5, \"hermes\", this.state.sell[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1736\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this5.setState({\n            sell: update(_this5.state.sell, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1737\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"hermes\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1748\n        },\n        __self: this\n      }, \"Sell All\"))))));\n    }\n  }, {\n    key: \"renderTableFood\",\n    value: function renderTableFood() {\n      var _this6 = this;\n\n      var _this$props$foodStock = this.props.foodStock,\n          cargill = _this$props$foodStock.cargill,\n          nestle = _this$props$foodStock.nestle,\n          pepsi = _this$props$foodStock.pepsi,\n          archer = _this$props$foodStock.archer,\n          sysco = _this$props$foodStock.sysco;\n      var _this$props$foodPrice = this.props.foodPrices,\n          cargillPrices = _this$props$foodPrice.cargill,\n          nestlePrices = _this$props$foodPrice.nestle,\n          pepsiPrices = _this$props$foodPrice.pepsi,\n          archerPrices = _this$props$foodPrice.archer,\n          syscoPrices = _this$props$foodPrice.sysco;\n      var cargillColor = getColorArrow(cargill.price, cargillPrices);\n      var nestleColor = getColorArrow(nestle.price, nestlePrices);\n      var pepsiColor = getColorArrow(pepsi.price, pepsiPrices);\n      var archerColor = getColorArrow(archer.price, archerPrices);\n      var syscoColor = getColorArrow(sysco.price, syscoPrices);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1781\n        },\n        __self: this\n      }, this.state.error && React.createElement(Message, {\n        error: true,\n        header: this.state.errorHeader,\n        content: this.state.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1783\n        },\n        __self: this\n      }), React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1786\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1787\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1788\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1789\n        },\n        __self: this\n      }, \"Company Name\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1790\n        },\n        __self: this\n      }, \"Price\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1791\n        },\n        __self: this\n      }, \"Shares Owned\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1792\n        },\n        __self: this\n      }, \"Total Value\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1793\n        },\n        __self: this\n      }, \"Buy Shares\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1794\n        },\n        __self: this\n      }, \"Sell Shares\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1798\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1799\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1800\n        },\n        __self: this\n      }, \"Cardgill\"), React.createElement(Table.Cell, {\n        style: {\n          color: cargillColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1801\n        },\n        __self: this\n      }, \"$\", castToDollar(cargill.price), \" \", cargillColor.arrow != \"\" ? React.createElement(Icon, {\n        name: cargillColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1801\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1801\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"cargill\", \"food\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1801\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1802\n        },\n        __self: this\n      }, cargill.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1803\n        },\n        __self: this\n      }, \"$\", castToDollar(cargill.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1804\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(1, \"cargill\", this.state.buy[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1805\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this6.setState({\n            buy: update(_this6.state.buy, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1806\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"cargill\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1817\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1819\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(1, \"cargill\", this.state.sell[1]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1820\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[1],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this6.setState({\n            sell: update(_this6.state.sell, {\n              1: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1821\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"cargill\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1832\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1835\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1836\n        },\n        __self: this\n      }, \"Nestel\"), React.createElement(Table.Cell, {\n        style: {\n          color: nestleColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1837\n        },\n        __self: this\n      }, \"$\", castToDollar(nestle.price), \" \", nestleColor.arrow != \"\" ? React.createElement(Icon, {\n        name: nestleColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1837\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1837\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"nestle\", \"food\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1837\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1838\n        },\n        __self: this\n      }, nestle.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1839\n        },\n        __self: this\n      }, \"$\", castToDollar(nestle.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1840\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(2, \"nestle\", this.state.buy[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1841\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this6.setState({\n            buy: update(_this6.state.buy, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1842\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"nestle\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1853\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1855\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(2, \"nestle\", this.state.sell[2]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1856\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[2],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this6.setState({\n            sell: update(_this6.state.sell, {\n              2: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1857\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"nestle\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1868\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1871\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1872\n        },\n        __self: this\n      }, \"PepisCo\"), React.createElement(Table.Cell, {\n        style: {\n          color: pepsiColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1873\n        },\n        __self: this\n      }, \"$\", castToDollar(pepsi.price), \" \", pepsiColor.arrow != \"\" ? React.createElement(Icon, {\n        name: pepsiColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1873\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1873\n        },\n        __self: this\n      }), \" \", React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"pepsi\", \"food\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1873\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1874\n        },\n        __self: this\n      }, pepsi.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1875\n        },\n        __self: this\n      }, \"$\", castToDollar(pepsi.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1876\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(3, \"pepsi\", this.state.buy[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1877\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this6.setState({\n            buy: update(_this6.state.buy, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1878\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"pepsi\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1889\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1891\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(3, \"pepsi\", this.state.sell[3]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1892\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[3],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this6.setState({\n            sell: update(_this6.state.sell, {\n              3: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1893\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"pepsi\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1904\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1907\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1908\n        },\n        __self: this\n      }, \"Cooca-Coola\"), React.createElement(Table.Cell, {\n        style: {\n          color: archerColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1909\n        },\n        __self: this\n      }, \"$\", castToDollar(archer.price), \" \", archerColor.arrow != \"\" ? React.createElement(Icon, {\n        name: archerColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1909\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1909\n        },\n        __self: this\n      }), React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"archer\", \"food\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1910\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1911\n        },\n        __self: this\n      }, archer.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1912\n        },\n        __self: this\n      }, \"$\", castToDollar(archer.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1913\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(4, \"archer\", this.state.buy[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1914\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        fluid: true,\n        onChange: function onChange(event) {\n          return _this6.setState({\n            buy: update(_this6.state.buy, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1915\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"archer\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1926\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1928\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(4, \"archer\", this.state.sell[4]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1929\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[4],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this6.setState({\n            sell: update(_this6.state.sell, {\n              4: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1930\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"archer\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1941\n        },\n        __self: this\n      }, \"Sell All\"))), React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1944\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1945\n        },\n        __self: this\n      }, \"Sisco\"), React.createElement(Table.Cell, {\n        style: {\n          color: syscoColor.color\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1946\n        },\n        __self: this\n      }, \"$\", castToDollar(sysco.price), \" \", syscoColor.arrow != \"\" ? React.createElement(Icon, {\n        name: syscoColor.arrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1946\n        },\n        __self: this\n      }) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1946\n        },\n        __self: this\n      }), React.createElement(Button, {\n        basic: true,\n        color: \"blue\",\n        onClick: this.handleClick(\"sysco\", \"food\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1947\n        },\n        __self: this\n      }, \"Price History\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1948\n        },\n        __self: this\n      }, sysco.sharesOwned), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1949\n        },\n        __self: this\n      }, \"$\", castToDollar(sysco.totalValue)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1950\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitBuy(5, \"sysco\", this.state.buy[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1951\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.buy[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Buy',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this6.setState({\n            buy: update(_this6.state.buy, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1952\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.buyAll(\"sysco\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1963\n        },\n        __self: this\n      }, \"Buy All\")), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1965\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmitSell(5, \"sysco\", this.state.sell[5]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1966\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.sell[5],\n        action: {\n          color: 'teal',\n          labelPosition: 'right',\n          content: 'Sell',\n          icon: \"cart\"\n        },\n        placeholder: \"# of Stocks\",\n        onChange: function onChange(event) {\n          return _this6.setState({\n            sell: update(_this6.state.sell, {\n              5: {\n                $set: event.target.value\n              }\n            })\n          });\n        },\n        fluid: true,\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1967\n        },\n        __self: this\n      })), React.createElement(Button, {\n        fluid: true,\n        style: {\n          marginTop: \"5px\"\n        },\n        onClick: this.sellAll(\"sysco\"),\n        basic: true,\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1978\n        },\n        __self: this\n      }, \"Sell All\"))))));\n    }\n  }, {\n    key: \"renderGraph\",\n    value: function renderGraph(stock, type) {\n      var _this$props5 = this.props,\n          techStock = _this$props5.techStock,\n          pharmaStock = _this$props5.pharmaStock,\n          foodStock = _this$props5.foodStock,\n          clothingStock = _this$props5.clothingStock,\n          cryptoStock = _this$props5.cryptoStock,\n          cryptoPrices = _this$props5.cryptoPrices,\n          techPrices = _this$props5.techPrices,\n          foodPrices = _this$props5.foodPrices,\n          clothingPrices = _this$props5.clothingPrices,\n          pharmaPrices = _this$props5.pharmaPrices;\n      var obj = {};\n      var i;\n\n      if (type === \"tech\") {\n        for (i = 0; i < this.props.techPrices[stock].length; i++) {\n          obj[i] = castToDollar(techPrices[stock][i]);\n        }\n\n        obj[i] = castToDollar(techStock[stock].price);\n      }\n\n      if (type === \"food\") {\n        for (i = 0; i < this.props.foodPrices[stock].length; i++) {\n          obj[i] = castToDollar(foodPrices[stock][i]);\n        }\n\n        obj[i + 1] = castToDollar(foodStock[stock].price);\n      }\n\n      if (type === \"pharma\") {\n        for (i = 0; i < this.props.pharmaPrices[stock].length; i++) {\n          obj[i] = castToDollar(pharmaPrices[stock][i]);\n        }\n\n        obj[i + 1] = castToDollar(pharmaStock[stock].price);\n      }\n\n      if (type === \"clothing\") {\n        for (i = 0; i < this.props.clothingPrices[stock].length; i++) {\n          obj[i] = castToDollar(clothingPrices[stock][i]);\n        }\n\n        obj[i + 1] = castToDollar(clothingStock[stock].price);\n      }\n\n      if (type === \"crypto\") {\n        for (i = 0; i < this.props.cryptoPrices[stock].length; i++) {\n          obj[i] = castToDollar(cryptoPrices[stock][i]);\n        }\n\n        obj[i + 1] = castToDollar(cryptoStock[stock].price);\n      }\n\n      return React.createElement(LineChart, {\n        thousands: \",\",\n        prefix: \"$\",\n        xtitle: \"Turn\",\n        ytitle: \"Price\",\n        data: obj,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2034\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var panes = [{\n        menuItem: 'Tech',\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 2043\n            },\n            __self: this\n          }, _this7.renderTableTech());\n        }\n      }, {\n        menuItem: 'Pharma',\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 2044\n            },\n            __self: this\n          }, _this7.renderTablePharma());\n        }\n      }, {\n        menuItem: 'Food',\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 2045\n            },\n            __self: this\n          }, _this7.renderTableFood());\n        }\n      }, {\n        menuItem: 'Clothing',\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 2046\n            },\n            __self: this\n          }, _this7.renderTableClothing(), \" \");\n        }\n      }, {\n        menuItem: 'Crypto',\n        render: function render() {\n          return React.createElement(Tab.Pane, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 2047\n            },\n            __self: this\n          }, _this7.renderTableCrypto(), \" \");\n        }\n      }];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2050\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2051\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        panes: panes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2053\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        open: this.state.open,\n        onClose: this.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2054\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2055\n        },\n        __self: this\n      }, \"Stock History\"), React.createElement(Modal.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2056\n        },\n        __self: this\n      }, this.renderGraph(this.state.stock, this.state.type)), React.createElement(Modal.Actions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2059\n        },\n        __self: this\n      }, React.createElement(Button, {\n        primary: true,\n        onClick: this.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2060\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"remove\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2061\n        },\n        __self: this\n      }), \" Close\"))));\n    }\n  }]);\n\n  return Investment;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    stats: state.stats,\n    events: state.events,\n    techStock: state.techStock,\n    pharmaStock: state.pharmaStock,\n    foodStock: state.foodStock,\n    clothingStock: state.clothingStock,\n    techPrices: state.techPrices,\n    foodPrices: state.foodPrices,\n    pharmaPrices: state.pharmaPrices,\n    clothingPrices: state.clothingPrices,\n    cryptoPrices: state.cryptoPrices,\n    cryptoStock: state.cryptoStock\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addNetWorth: addNetWorth,\n  subtractNetWorth: subtractNetWorth,\n  addEvent: addEvent,\n  boughtTechStock: boughtTechStock,\n  soldTechStock: soldTechStock,\n  boughtFoodStock: boughtFoodStock,\n  soldFoodStock: soldFoodStock,\n  boughtClothingStock: boughtClothingStock,\n  soldClothingStock: soldClothingStock,\n  boughtPharmaStock: boughtPharmaStock,\n  soldPharmaStock: soldPharmaStock,\n  boughtCryptoStock: boughtCryptoStock,\n  soldCryptoStock: soldCryptoStock\n})(Investment);","map":{"version":3,"sources":["/Users/olivier/Downloads/Hedge-Fund-Manager-Official/src/Investment.js"],"names":["React","Component","connect","addNetWorth","subtractNetWorth","addEvent","castToDollar","getColorArrow","boughtTechStock","soldTechStock","boughtCryptoStock","soldCryptoStock","boughtClothingStock","soldClothingStock","boughtPharmaStock","soldPharmaStock","boughtFoodStock","soldFoodStock","Table","Tab","Form","Input","Message","Button","Icon","Modal","Grid","update","Link","ReactChartkick","LineChart","Chart","addAdapter","Investment","state","buy","sell","errorMessage","errorHeader","error","open","stock","type","buyAll","event","preventDefault","props","techStock","pharmaStock","foodStock","clothingStock","cryptoStock","netWorth","stats","amount","Math","floor","price","totalCost","title","description","totalCost1","totalCost2","totalCost3","totalCost4","sellAll","sharesOwned","onSubmitBuy","number","isNaN","setState","parseInt","console","log","newState","$set","onSubmitSell","handleClick","close","criminalLevel","history","push","eos","xrp","bitcoin","tron","ethereum","cryptoPrices","eosPrices","xrpPrices","bitcoinPrices","tronPrices","ethereumPrices","eosColor","xrpColor","bitcoinColor","tronColor","ethereumColor","color","arrow","totalValue","labelPosition","content","icon","target","value","marginTop","apple","google","microsoft","facebook","dropbox","techPrices","applePrices","googlePrices","microsoftPrices","facebookPrices","dropboxPrices","appleColor","dropboxColor","facebookColor","microsoftColor","googleColor","pfizer","novartis","hoffmann","merck","johnson","pharmaPrices","pfizerPrices","novartisPrices","hoffmannPrices","merckPrices","johnsonPrices","pfizerColor","novartisColor","hoffmannColor","merckColor","johnsonColor","dior","nike","adidas","gucci","hermes","clothingPrices","diorPrices","nikePrices","adidasPrices","gucciPrices","hermesPrices","diorColor","nikeColor","adidasColor","gucciColor","hermesColor","cargill","nestle","pepsi","archer","sysco","foodPrices","cargillPrices","nestlePrices","pepsiPrices","archerPrices","syscoPrices","cargillColor","nestleColor","pepsiColor","archerColor","syscoColor","obj","i","length","panes","menuItem","render","renderTableTech","renderTablePharma","renderTableFood","renderTableClothing","renderTableCrypto","renderGraph","mapStateToProps","events"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { addNetWorth, subtractNetWorth, addEvent } from \"./actions/index\";\nimport { castToDollar, getColorArrow } from './functions';\nimport { boughtTechStock, soldTechStock } from './actions/stocks/TechStock';\nimport { boughtCryptoStock, soldCryptoStock } from './actions/stocks/CryptoStock';\nimport { boughtClothingStock, soldClothingStock } from './actions/stocks/ClothingStock';\nimport { boughtPharmaStock, soldPharmaStock } from './actions/stocks/PharmaStock';\nimport { boughtFoodStock, soldFoodStock } from './actions/stocks/FoodStock'; \nimport { Table, Tab, Form, Input, Message, Button, Icon, Modal, Grid } from \"semantic-ui-react\";\nimport update from 'immutability-helper';\nimport { Link } from 'react-router-dom';\nimport ReactChartkick, { LineChart } from 'react-chartkick'\n\nimport Chart from 'chart.js'\n\nReactChartkick.addAdapter(Chart)\n \n\n// TODO: Have seperate state variables for every input \n// Have specific error messages for each sector\n// Add event messages for buy / sell all\n\nclass Investment extends Component {\n\n  state = {\n    buy: {\n      1: \"\",\n      2: \"\",\n      3: \"\",\n      4: \"\",\n      5: \"\"\n    },\n    sell: {\n      1: \"\",\n      2: \"\",\n      3: \"\",\n      4: \"\",\n      5: \"\"\n    },\n    errorMessage: \"\",\n    errorHeader: \"\",\n    error: false,\n    open: false,\n    stock: \"\",\n    type: \"\"\n  };\n\n  componentDidMount() {\n    if (this.props.stats.criminalLevel >= 100) {\n      this.props.history.push('/gameover');\n    }\n  }\n\n  buyAll = (stock) => {\n    return event => {\n      event.preventDefault();\n      const {\n          techStock,\n          pharmaStock,\n          foodStock,\n          clothingStock,\n          cryptoStock\n        } = this.props;\n\n      const {\n        netWorth\n      } = this.props.stats;\n\n\n      if (stock === \"apple\" || stock === \"microsoft\" || stock === \"facebook\" || stock === \"google\" || stock === \"dropbox\") {\n        const amount = Math.floor(netWorth / techStock[stock].price);\n        this.props.boughtTechStock(stock, amount);\n        var totalCost = amount * techStock[stock].price;\n        this.props.subtractNetWorth(totalCost);\n        if (amount > 0) {\n          if (stock === \"apple\") {\n            this.props.addEvent( { title: `Purchased Pear Stock`, description: `Purchased ${amount} shares at $${castToDollar(techStock[stock].price)} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"google\") {\n            this.props.addEvent( { title: `Purchased Googol Stock`, description: `Purchased ${amount} shares at $${castToDollar(techStock[stock].price)} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"microsoft\") {\n            this.props.addEvent( { title: `Purchased Wicrodoft Stock`, description: `Purchased ${amount} shares at $${castToDollar(techStock[stock].price)} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"dropbox\") {\n            this.props.addEvent( { title: `Purchased Boxdrop Stock`, description: `Purchased ${amount} shares at $${castToDollar(techStock[stock].price)} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"facebook\") {\n            this.props.addEvent( { title: `Purchased Facenovel Stock`, description: `Purchased ${amount} shares at $${castToDollar(techStock[stock].price)} for a total of $${castToDollar(totalCost)}`});\n          }\n        }\n      } else if (stock === \"cargill\" || stock === \"nestle\" || stock === \"pepsi\" || stock === \"archer\" || stock === \"sysco\") {\n        const amount = Math.floor(netWorth / foodStock[stock].price);\n        this.props.boughtFoodStock(stock, amount);\n        var totalCost1 = amount * foodStock[stock].price\n        this.props.subtractNetWorth(totalCost1);\n        if (amount > 0) {\n          if (stock === \"cargill\") {\n            this.props.addEvent( { title: `Purchased Cardgill Stock`, description: `Purchased ${amount} shares at $${castToDollar(foodStock[stock].price)} for a total of $${castToDollar(totalCost1)}`});\n          } else if (stock === \"nestle\") {\n            this.props.addEvent( { title: `Purchased Nestel Stock`, description: `Purchased ${amount} shares at $${castToDollar(foodStock[stock].price)} for a total of $${castToDollar(totalCost1)}`});\n          } else if (stock === \"pepsi\") {\n            this.props.addEvent( { title: `Purchased Pepsico Stock`, description: `Purchased ${amount} shares at $${castToDollar(foodStock[stock].price)} for a total of $${castToDollar(totalCost1)}`});\n          } else if (stock === \"archer\") {\n            this.props.addEvent( { title: `Purchased Cooca-Coola Stock`, description: `Purchased ${amount} shares at $${castToDollar(foodStock[stock].price)} for a total of $${castToDollar(totalCost1)}`});\n          } else if (stock === \"sysco\") {\n            this.props.addEvent( { title: `Purchased Sisco Stock`, description: `Purchased ${amount} shares at $${castToDollar(foodStock[stock].price)} for a total of $${castToDollar(totalCost1)}`});\n          }\n        }\n      } else if (stock === \"pfizer\" || stock === \"novartis\" || stock === \"hoffmann\" || stock === \"merck\" || stock === \"johnson\") {\n        const amount = Math.floor(netWorth / pharmaStock[stock].price);\n        this.props.boughtPharmaStock(stock, amount);\n        var totalCost2 = amount * pharmaStock[stock].price;\n        this.props.subtractNetWorth(totalCost2);\n        if (amount > 0) {\n          if (stock === \"pfizer\") {\n            this.props.addEvent( { title: `Purchased Fizzer Stock`, description: `Purchased ${amount} shares at $${castToDollar(pharmaStock[stock].price)} for a total of $${castToDollar(totalCost2)}`});\n          } else if (stock === \"novartis\") {\n            this.props.addEvent( { title: `Purchased MedicinePlus Stock`, description: `Purchased ${amount} shares at $${castToDollar(pharmaStock[stock].price)} for a total of $${castToDollar(totalCost2)}`});\n          } else if (stock === \"hoffmann\") {\n            this.props.addEvent( { title: `Purchased Hofman-LaRose Stock`, description: `Purchased ${amount} shares at $${castToDollar(pharmaStock[stock].price)} for a total of $${castToDollar(totalCost2)}`});\n          } else if (stock === \"merck\") {\n            this.props.addEvent( { title: `Purchased Murck & Co. Stock`, description: `Purchased ${amount} shares at $${castToDollar(pharmaStock[stock].price)} for a total of $${castToDollar(totalCost2)}`});\n          } else if (stock === \"johnson\") {\n            this.props.addEvent( { title: `Purchased Johnny & Johnny Stock`, description: `Purchased ${amount} shares at $${castToDollar(pharmaStock[stock].price)} for a total of $${castToDollar(totalCost2)}`});\n          }\n        }\n      } else if (stock === \"dior\" || stock === \"nike\" || stock === \"adidas\" || stock === \"gucci\" || stock === \"hermes\") {\n        const amount = Math.floor(netWorth / clothingStock[stock].price);\n        var totalCost3;\n        if (amount != 0) {\n          this.props.boughtClothingStock(stock, amount);\n          totalCost3 = amount * clothingStock[stock].price;\n          this.props.subtractNetWorth(totalCost3);\n        }\n        if (amount > 0) {\n          if (stock === \"dior\") {\n            this.props.addEvent( { title: `Purchased Doir Stock`, description: `Purchased ${amount} shares at $${castToDollar(clothingStock[stock].price)} for a total of $${castToDollar(totalCost3)}`});\n          } else if (stock === \"nike\") {\n            this.props.addEvent( { title: `Purchased Nikke Stock`, description: `Purchased ${amount} shares at $${castToDollar(clothingStock[stock].price)} for a total of $${castToDollar(totalCost3)}`});\n          } else if (stock === \"adidas\") {\n            this.props.addEvent( { title: `Purchased Addiddas Stock`, description: `Purchased ${amount} shares at $${castToDollar(clothingStock[stock].price)} for a total of $${castToDollar(totalCost3)}`});\n          } else if (stock === \"gucci\") {\n            this.props.addEvent( { title: `Purchased Guchi Stock`, description: `Purchased ${amount} shares at $${castToDollar(clothingStock[stock].price)} for a total of $${castToDollar(totalCost3)}`});\n          } else if (stock === \"hermes\") {\n            this.props.addEvent( { title: `Purchased Harmes Stock`, description: `Purchased ${amount} shares at $${castToDollar(clothingStock[stock].price)} for a total of $${castToDollar(totalCost3)}`});\n          }\n        }\n      } else if (stock === \"eos\" || stock === \"xrp\" || stock === \"bitcoin\" || stock === \"tron\" || stock === \"ethereum\") {\n        const amount = Math.floor(netWorth / cryptoStock[stock].price);\n        this.props.boughtCryptoStock(stock, amount);\n        var totalCost4 = amount * cryptoStock[stock].price;\n        this.props.subtractNetWorth(totalCost4);\n        if (amount > 0) {\n          if (stock === \"eos\") {\n            this.props.addEvent( { title: `Purchased EOS`, description: `Purchased ${amount} EOS at $${castToDollar(cryptoStock[stock].price)} for a total of $${castToDollar(totalCost4)}`});\n          } else if (stock === \"xrp\") {\n            this.props.addEvent( { title: `Purchased XRP`, description: `Purchased ${amount} XRP at $${castToDollar(cryptoStock[stock].price)} for a total of $${castToDollar(totalCost4)}`});\n          } else if (stock === \"bitcoin\") {\n            this.props.addEvent( { title: `Purchased Bitcoin`, description: `Purchased ${amount} Bitcoin at $${castToDollar(cryptoStock[stock].price)} for a total of $${castToDollar(totalCost4)}`});\n          } else if (stock === \"tron\") {\n            this.props.addEvent( { title: `Purchased Tron`, description: `Purchased ${amount} TRON at $${castToDollar(cryptoStock[stock].price)} for a total of $${castToDollar(totalCost4)}`});\n          } else if (stock === \"ethereum\") {\n            this.props.addEvent( { title: `Purchased Ethereum`, description: `Purchased ${amount} Ether at $${castToDollar(cryptoStock[stock].price)} for a total of $${castToDollar(totalCost4)}`});\n          }\n        }\n      }\n    }\n  }\n\n  sellAll = stock => {\n    return event => {\n      event.preventDefault();\n      const {\n          techStock,\n          pharmaStock,\n          foodStock,\n          clothingStock,\n          cryptoStock\n        } = this.props;\n\n      const {\n        netWorth\n      } = this.props.stats;\n\n      if (stock === \"apple\" || stock === \"microsoft\" || stock === \"facebook\" || stock === \"google\" || stock === \"dropbox\") {\n        const amount = techStock[stock].sharesOwned;\n        this.props.soldTechStock(stock, amount);\n        var totalCost = amount * techStock[stock].price;\n        this.props.addNetWorth(totalCost);\n        if (amount > 0) {\n          if (stock === \"apple\") {\n            this.props.addEvent( { title: `Sold Pear Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"google\") {\n            this.props.addEvent( { title: `Sold Googol Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"microsoft\") {\n            this.props.addEvent( { title: `Sold Wicrodoft Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"dropbox\") {\n            this.props.addEvent( { title: `Sold Boxdrop Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"facebook\") {\n            this.props.addEvent( { title: `Sold Facenovel Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          }\n        }\n      } else if (stock === \"cargill\" || stock === \"nestle\" || stock === \"pepsi\" || stock === \"archer\" || stock === \"sysco\") {\n        const amount = foodStock[stock].sharesOwned;\n        this.props.soldFoodStock(stock, amount);\n        var totalCost = amount * foodStock[stock].price;\n        this.props.addNetWorth(totalCost);\n        if (amount > 0) {\n          if (stock === \"cargill\") {\n            this.props.addEvent( { title: `Sold Cardgill Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"nestle\") {\n            this.props.addEvent( { title: `Sold Nestel Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"pepsi\") {\n            this.props.addEvent( { title: `Sold Pepsico Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"archer\") {\n            this.props.addEvent( { title: `Sold Cooca-Coola Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"sysco\") {\n            this.props.addEvent( { title: `Sold Sisco Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          }\n        }\n      } else if (stock === \"pfizer\" || stock === \"novartis\" || stock === \"hoffmann\" || stock === \"merck\" || stock === \"johnson\") {\n        const amount = pharmaStock[stock].sharesOwned;\n        this.props.soldPharmaStock(stock, amount);\n        var totalCost = amount * pharmaStock[stock].price;\n        this.props.addNetWorth(totalCost);\n        if (amount > 0) {\n          if (stock === \"pfizer\") {\n            this.props.addEvent( { title: `Sold Fizzer Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"novartis\") {\n            this.props.addEvent( { title: `Sold MedicinePlus Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"hoffmann\") {\n            this.props.addEvent( { title: `Sold Hofman-LaRose Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"merck\") {\n            this.props.addEvent( { title: `Sold Murck & Co. Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"johnson\") {\n            this.props.addEvent( { title: `Sold Johnny & Johnny Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          }\n        }     \n      } else if (stock === \"dior\" || stock === \"nike\" || stock === \"adidas\" || stock === \"gucci\" || stock === \"hermes\") {\n        const amount = clothingStock[stock].sharesOwned;\n        this.props.soldClothingStock(stock, amount);\n        var totalCost = amount * clothingStock[stock].price;\n        this.props.addNetWorth(totalCost);\n        if (amount > 0) {\n          if (stock === \"dior\") {\n            this.props.addEvent( { title: `Sold Doir Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"nike\") {\n            this.props.addEvent( { title: `Sold Nikke Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"adidas\") {\n            this.props.addEvent( { title: `Sold Addiddas Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"gucci\") {\n            this.props.addEvent( { title: `Sold Guchi Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"hermes\") {\n            this.props.addEvent( { title: `Sold Harmes Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          }\n        }\n      } else if (stock === \"eos\" || stock === \"xrp\" || stock === \"bitcoin\" || stock === \"tron\" || stock === \"ethereum\") {\n        const amount = cryptoStock[stock].sharesOwned;\n        this.props.soldCryptoStock(stock, amount);\n        var totalCost = amount * cryptoStock[stock].price;\n        this.props.addNetWorth(totalCost);\n        if (amount > 0) {\n          if (stock === \"eos\") {\n            this.props.addEvent( { title: `Purchased EOS`, description: `Purchased ${amount} EOS at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"xrp\") {\n            this.props.addEvent( { title: `Purchased XRP`, description: `Purchased ${amount} XRP at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"bitcoin\") {\n            this.props.addEvent( { title: `Purchased Bitcoin`, description: `Purchased ${amount} Bitcoin at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"tron\") {\n            this.props.addEvent( { title: `Purchased Tron`, description: `Purchased ${amount} TRON at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          } else if (stock === \"ethereum\") {\n            this.props.addEvent( { title: `Purchased Ethereum`, description: `Purchased ${amount} Ether at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n          }\n        }\n      }\n    }\n  }\n\n  onSubmitBuy = (number, stock, amount) => {\n    return event => {\n      event.preventDefault();\n\n      if (isNaN(amount) || amount === \"\" || amount < 1) {\n        this.setState({ error: true, errorHeader: \"Invalid Input\", errorMessage: \"Please enter a valid number\"});\n      } else {        \n        this.setState({ error: false, errorMessage: \"\"});\n\n        const {\n          techStock,\n          pharmaStock,\n          foodStock,\n          clothingStock,\n          cryptoStock\n        } = this.props;\n\n        switch (stock) {\n          case \"apple\":\n            var totalCost = parseInt(this.state.buy[number]) * techStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtTechStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Purchased Pear Stock`, description: `Purchased ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"google\":\n            totalCost = parseInt(this.state.buy[number]) * techStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtTechStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Purchased Googol Stock`, description: `Purchased ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"microsoft\":\n            totalCost = parseInt(this.state.buy[number]) * techStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtTechStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Purchased Wicrodoft Stock`, description: `Purchased ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"facebook\":\n            totalCost = parseInt(this.state.buy[number]) * techStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtTechStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Purchased Facenovel Stock`, description: `Purchased ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"dropbox\":\n            totalCost = parseInt(this.state.buy[number]) * techStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtTechStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Purchased Boxdrop Stock`, description: `Purchased ${amount} shares at $${techStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"pfizer\":\n            totalCost = parseInt(this.state.buy[number]) * pharmaStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtPharmaStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Purchased Fizzer Stock`, description: `Purchased ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"novartis\":\n            totalCost = parseInt(this.state.buy[number]) * pharmaStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtPharmaStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Purchased MedicinePlus Stock`, description: `Purchased ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"hoffmann\":\n            totalCost = parseInt(this.state.buy[number]) * pharmaStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtPharmaStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Purchased Hofman-LaRose Stock`, description: `Purchased ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"merck\":\n            totalCost = parseInt(this.state.buy[number]) * pharmaStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtPharmaStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Purchased Murck & Co. Stock`, description: `Purchased ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"johnson\":\n            totalCost = parseInt(this.state.buy[number]) * pharmaStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtPharmaStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Purchased Johnny & Johnny Stock`, description: `Purchased ${amount} shares at $${pharmaStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"cargill\":\n            totalCost = parseInt(this.state.buy[number]) * foodStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtFoodStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Purchased Cardgill Stock`, description: `Purchased ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"nestle\":\n            totalCost = parseInt(this.state.buy[number]) * foodStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtFoodStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Purchased Nestel Stock`, description: `Purchased ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"pepsi\":\n            totalCost = parseInt(this.state.buy[number]) * foodStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtFoodStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Purchased PepisCo Stock`, description: `Purchased ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"archer\":\n            totalCost = parseInt(this.state.buy[number]) * foodStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtFoodStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Purchased Cooca-Coola Company Stock`, description: `Purchased ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"sysco\":\n            totalCost = parseInt(this.state.buy[number]) * foodStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtFoodStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Purchased Sisco Stock`, description: `Purchased ${amount} shares at $${foodStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"dior\":\n            totalCost = parseInt(this.state.buy[number]) * clothingStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtClothingStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Purchased Doir Stock`, description: `Purchased ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"nike\":\n            totalCost = parseInt(this.state.buy[number]) * clothingStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtClothingStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Purchased Nikke Stock`, description: `Purchased ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"adidas\":\n            totalCost = parseInt(this.state.buy[number]) * clothingStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtClothingStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Purchased Addiddas Stock`, description: `Purchased ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"gucci\":\n            totalCost = parseInt(this.state.buy[number]) * clothingStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtClothingStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Purchased Guchi Stock`, description: `Purchased ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"hermes\":\n            totalCost = parseInt(this.state.buy[number]) * clothingStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtClothingStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Purchased Harmes Stock`, description: `Purchased ${amount} shares at $${clothingStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"eos\":\n            totalCost = parseInt(this.state.buy[number]) * cryptoStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtCryptoStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Purchased EOS`, description: `Purchased ${amount} EOS at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"tron\":\n            totalCost = parseInt(this.state.buy[number]) * cryptoStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtCryptoStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Purchased TRON`, description: `Purchased ${amount} TRON at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"xrp\":\n            totalCost = parseInt(this.state.buy[number]) * cryptoStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtCryptoStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Purchased XRP`, description: `Purchased ${amount} XRP at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"bitcoin\":\n            totalCost = parseInt(this.state.buy[number]) * cryptoStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtCryptoStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Purchased Bitcoin`, description: `Purchased ${amount} Bitcoin at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          case \"ethereum\":\n            totalCost = parseInt(this.state.buy[number]) * cryptoStock[stock].price;\n            if (totalCost > this.props.stats.netWorth) {\n              this.setState({ error: true, errorHeader: \"Insufficent Funds\", errorMessage: \"You don't have enough money to purchase that!\"});\n            } else {\n              this.props.boughtCryptoStock(stock, parseInt(amount));\n              this.props.subtractNetWorth(parseInt(this.state.buy[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Purchased Ethereum`, description: `Purchased ${amount} Ether at $${cryptoStock[stock].price} for a total of $${castToDollar(totalCost)}`});\n            }\n            break;\n          default:\n            console.log(\"Wtf just happened buy\");\n            break;\n        }\n\n        var newState = update(this.state.buy, {\n          1: {$set: ''},\n          2: {$set: ''},\n          3: {$set: ''},\n          4: {$set: ''},\n          5: {$set: ''}\n        });\n        this.setState({buy: newState});\n        }\n    }\n  };\n\n  onSubmitSell = (number, stock, amount) => {\n    return event => {\n      event.preventDefault();\n\n      if (isNaN(amount) || amount === \"\" || amount < 1) {\n        this.setState({ error: true, errorHeader: \"Invalid Input\", errorMessage: \"Please enter a valid number\"});\n      } else {        \n        this.setState({ error: false, errorMessage: \"\"});\n\n        const {\n          techStock,\n          pharmaStock,\n          foodStock,\n          clothingStock,\n          cryptoStock\n        } = this.props;\n\n        switch (stock) {\n          case \"apple\":\n            if (amount > techStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldTechStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Sold Pear Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * techStock[stock].price}`});\n            }\n            break;\n          case \"google\":\n            if (amount > techStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldTechStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Sold Googol Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * techStock[stock].price}`});\n            }\n            break;\n          case \"microsoft\":\n            if (amount > techStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldTechStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Sold Wicrodoft Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * techStock[stock].price}`});\n            }\n            break;\n          case \"facebook\":\n            if (amount > techStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldTechStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Sold Facenovel Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * techStock[stock].price}`});\n            }\n            break;\n          case \"dropbox\":\n            if (amount > techStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldTechStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * techStock[stock].price);\n              this.props.addEvent( { title: `Sold Boxdrop Stock`, description: `Sold ${amount} shares at $${techStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * techStock[stock].price}`});\n            }\n            break;\n          case \"pfizer\":\n            if (amount > pharmaStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldPharmaStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Sold Fizzer Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * pharmaStock[stock].price}`});\n            }\n            break;\n          case \"novartis\":\n            if (amount > pharmaStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldPharmaStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Sold MedicinePlus Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * pharmaStock[stock].price}`});\n            }\n            break;\n          case \"hoffmann\":\n            if (amount > pharmaStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldPharmaStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Sold Hofman-LaRose Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * pharmaStock[stock].price}`});\n            }\n            break;\n          case \"merck\":\n            if (amount > pharmaStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldPharmaStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Sold Murck & Co. Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * pharmaStock[stock].price}`});\n            }\n            break;\n          case \"johnson\":\n            if (amount > pharmaStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldPharmaStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * pharmaStock[stock].price);\n              this.props.addEvent( { title: `Sold Johnny & Johnny Stock`, description: `Sold ${amount} shares at $${pharmaStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * pharmaStock[stock].price}`});\n            }\n            break;\n          case \"cargill\":\n            if (amount > foodStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldFoodStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Sold Cardgill Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * foodStock[stock].price}`});\n            }\n            break;\n          case \"nestle\":\n            if (amount > foodStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldFoodStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Sold Nestel Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * foodStock[stock].price}`});\n            }\n            break;\n          case \"pepsi\":\n            if (amount > foodStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldFoodStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Sold PepisCo Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * foodStock[stock].price}`});\n            }\n            break;\n          case \"archer\":\n            if (amount > foodStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldFoodStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Sold Cooca-Coola Company Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * foodStock[stock].price}`});\n            }\n            break;\n          case \"sysco\":\n            if (amount > foodStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldFoodStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * foodStock[stock].price);\n              this.props.addEvent( { title: `Sold Sisco Stock`, description: `Sold ${amount} shares at $${foodStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * foodStock[stock].price}`});\n            }\n            break;\n          case \"dior\":\n            if (amount > clothingStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldClothingStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Sold Doir Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * clothingStock[stock].price}`});\n            }\n            break;\n          case \"nike\":\n            if (amount > clothingStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldClothingStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Sold Nikke Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * clothingStock[stock].price}`});\n            }\n            break;\n          case \"adidas\":\n            if (amount > clothingStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldClothingStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Sold Addiddas Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * clothingStock[stock].price}`});\n            }\n            break;\n          case \"gucci\":\n            if (amount > clothingStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldClothingStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Sold Guchi Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * clothingStock[stock].price}`});\n            }\n            break;\n          case \"hermes\":\n            if (amount > clothingStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Shares\", errorMessage: \"You don't have that many shares!\"});\n            } else {\n              this.props.soldClothingStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * clothingStock[stock].price);\n              this.props.addEvent( { title: `Sold Harmes Stock`, description: `Sold ${amount} shares at $${clothingStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * clothingStock[stock].price}`});\n            }\n            break;\n          case \"eos\":\n            if (amount > cryptoStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Value\", errorMessage: \"You don't have that many EOS\"});\n            } else {\n              this.props.soldCryptoStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Sold EOS`, description: `Sold ${amount} EOS at $${cryptoStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * cryptoStock[stock].price}`});\n            }\n            break;\n          case \"tron\":\n            if (amount > cryptoStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Value\", errorMessage: \"You don't have that many TRON\"});\n            } else {\n              this.props.soldCryptoStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Sold TRON`, description: `Sold ${amount} TRON at $${cryptoStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * cryptoStock[stock].price}`});\n            }\n            break;\n          case \"xrp\":\n            if (amount > cryptoStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Value\", errorMessage: \"You don't have that many XRP\"});\n            } else {\n              this.props.soldCryptoStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Sold XRP`, description: `Sold ${amount} XRP at $${cryptoStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * cryptoStock[stock].price}`});\n            }\n            break;\n          case \"bitcoin\":\n            if (amount > cryptoStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Value\", errorMessage: \"You don't have that many Bitcoin\"});\n            } else {\n              this.props.soldCryptoStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Sold Bitcoin`, description: `Sold ${amount} Bitcoin at $${cryptoStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * cryptoStock[stock].price}`});\n            }\n            break;\n          case \"ethereum\":\n            if (amount > cryptoStock[stock].sharesOwned) {\n                this.setState({ error: true, errorHeader: \"Insufficent Value\", errorMessage: \"You don't have that many Ether\"});\n            } else {\n              this.props.soldCryptoStock(stock, parseInt(amount));\n              this.props.addNetWorth(parseInt(this.state.sell[number]) * cryptoStock[stock].price);\n              this.props.addEvent( { title: `Sold Ethereum`, description: `Sold ${amount} Ether at $${cryptoStock[stock].price} for a total profit of $${parseInt(this.state.buy[number]) * cryptoStock[stock].price}`});\n            }\n            break;\n          default:\n            console.log(\"Wtf just happened\");\n            break;\n        }\n\n        var newState = update(this.state.sell, {\n          1: {$set: ''},\n          2: {$set: ''},\n          3: {$set: ''},\n          4: {$set: ''},\n          5: {$set: ''}\n        });\n\n        this.setState({sell: newState});\n      }\n    }\n  }\n\n  handleClick = (stock, type) => {\n    return event => {\n      event.preventDefault();\n      this.setState({ stock: stock, type: type, open: true});\n    }\n  }\n  renderTableCrypto() {\n\n    const {\n      eos,\n      xrp,\n      bitcoin,\n      tron,\n      ethereum\n    } = this.props.cryptoStock;\n\n    const {\n      eos: eosPrices,\n      xrp: xrpPrices,\n      bitcoin: bitcoinPrices,\n      tron: tronPrices,\n      ethereum: ethereumPrices\n    } = this.props.cryptoPrices\n\n    const eosColor = getColorArrow(eos.price, this.props.cryptoPrices[\"eos\"]);\n    const xrpColor = getColorArrow(xrp.price, xrpPrices);\n    const bitcoinColor = getColorArrow(bitcoin.price, bitcoinPrices);\n    const tronColor = getColorArrow(tron.price, tronPrices);\n    const ethereumColor = getColorArrow(ethereum.price, ethereumPrices);\n\n    return (\n        <div>\n          { this.state.error && \n          <Message error header={this.state.errorHeader} content={this.state.errorMessage} />\n          }\n          \n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Company Name</Table.HeaderCell>\n              <Table.HeaderCell>Price</Table.HeaderCell>\n              <Table.HeaderCell>Shares Owned</Table.HeaderCell>\n              <Table.HeaderCell>Total Value</Table.HeaderCell>\n              <Table.HeaderCell>Buy Shares</Table.HeaderCell>\n              <Table.HeaderCell>Sell Shares</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>Bitcoin</Table.Cell>\n              <Table.Cell style={{ color: bitcoinColor.color}}>${castToDollar(bitcoin.price)} {bitcoinColor.arrow != \"\" ? <Icon name={bitcoinColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"bitcoin\", \"crypto\")}>Price History</Button></Table.Cell>\n              <Table.Cell>{bitcoin.sharesOwned}</Table.Cell>\n              <Table.Cell>${castToDollar(bitcoin.totalValue)}</Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitBuy(3, \"bitcoin\", this.state.buy[3])}>\n                  <Input\n                    value={this.state.buy[3]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    fluid\n                    onChange={event => this.setState({ buy: update(this.state.buy, {\n                      3: {$set: event.target.value}\n                    })})}\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"bitcoin\")} basic color=\"teal\">Buy All</Button>\n              </Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitSell(3, \"bitcoin\", this.state.sell[3])}>\n                  <Input\n                    value={this.state.sell[3]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    onChange={event => this.setState({ sell: update(this.state.sell, {\n                      3: {$set: event.target.value}\n                    })})}\n                    fluid\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"bitcoin\")} basic color=\"teal\">Sell All</Button>\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Ethereum</Table.Cell>\n              <Table.Cell style={{ color: ethereumColor.color}}>${castToDollar(ethereum.price)} {ethereumColor.arrow != \"\" ? <Icon name={ethereumColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"ethereum\", \"crypto\")}>Price History</Button></Table.Cell>\n              <Table.Cell>{ethereum.sharesOwned}</Table.Cell>\n              <Table.Cell>${castToDollar(ethereum.totalValue)}</Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitBuy(5, \"ethereum\", this.state.buy[5])}>\n                  <Input\n                    value={this.state.buy[5]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    fluid\n                    onChange={event => this.setState({ buy: update(this.state.buy, {\n                      5: {$set: event.target.value}\n                    })})}\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"ethereum\")} basic color=\"teal\">Buy All</Button>\n              </Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitSell(5, \"ethereum\", this.state.sell[5])}>\n                  <Input\n                    value={this.state.sell[5]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    onChange={event => this.setState({ sell: update(this.state.sell, {\n                      5: {$set: event.target.value}\n                    })})}\n                    fluid\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"ethereum\")} basic color=\"teal\">Sell All</Button>\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>EOS</Table.Cell>\n              <Table.Cell style={{ color: eosColor.color}}>\n                ${castToDollar(eos.price)} {eosColor.arrow != \"\" ? <Icon name={eosColor.arrow} /> : <p></p>}\n                  <Button basic color=\"blue\" onClick={this.handleClick(\"eos\", \"crypto\")}>Price History</Button>\n              </Table.Cell>\n              <Table.Cell>{eos.sharesOwned}</Table.Cell>\n              <Table.Cell>${castToDollar(eos.totalValue)}</Table.Cell>\n              <Table.Cell>\n                  <Form onSubmit={this.onSubmitBuy(1, \"eos\", this.state.buy[1])}>\n                  <Input\n                    value={this.state.buy[1]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    fluid\n                    onChange={event => this.setState({ buy: update(this.state.buy, {\n                      1: {$set: event.target.value}\n                    })})}\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"eos\")} basic color=\"teal\">Buy All</Button>\n              </Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitSell(1, \"eos\", this.state.sell[1])}>\n                  <Input\n                    value={this.state.sell[1]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    onChange={event => this.setState({ sell: update(this.state.sell, {\n                      1: {$set: event.target.value}\n                    })})}\n                    fluid\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"eos\")} basic color=\"teal\">Sell All</Button>\n              \n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>XRP</Table.Cell>\n              <Table.Cell style={{ color: xrpColor.color}}>${castToDollar(xrp.price)} {xrpColor.arrow != \"\" ? <Icon name={xrpColor.arrow} /> : <p></p>}\n              <Button basic color=\"blue\" onClick={this.handleClick(\"xrp\", \"crypto\")}>Price History</Button></Table.Cell>\n              <Table.Cell>{xrp.sharesOwned}</Table.Cell>\n              <Table.Cell>${castToDollar(xrp.totalValue)}</Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitBuy(2, \"xrp\", this.state.buy[2])}>\n                  <Input\n                    value={this.state.buy[2]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    fluid\n                    onChange={event => this.setState({ buy: update(this.state.buy, {\n                      2: {$set: event.target.value}\n                    })})}\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"xrp\")} basic color=\"teal\">Buy All</Button>\n              </Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitSell(2, \"xrp\", this.state.sell[2])}>\n                  <Input\n                    value={this.state.sell[2]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    onChange={event => this.setState({ sell: update(this.state.sell, {\n                      2: {$set: event.target.value}\n                    })})}\n                    fluid\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"xrp\")} basic color=\"teal\">Sell All</Button>\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>TRON</Table.Cell>\n              <Table.Cell style={{ color: tronColor.color}}>${castToDollar(tron.price)} {tronColor.arrow != \"\" ? <Icon name={tronColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"tron\", \"crypto\")}>Price History</Button></Table.Cell>\n              <Table.Cell>{tron.sharesOwned}</Table.Cell>\n              <Table.Cell>${castToDollar(tron.totalValue)}</Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitBuy(4, \"tron\", this.state.buy[4])}>\n                  <Input\n                    value={this.state.buy[4]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    fluid\n                    onChange={event => this.setState({ buy: update(this.state.buy, {\n                      4: {$set: event.target.value}\n                    })})}\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"tron\")} basic color=\"teal\">Buy All</Button>\n              </Table.Cell>\n              <Table.Cell>\n                <Form onSubmit={this.onSubmitSell(4, \"tron\", this.state.sell[4])}>\n                  <Input\n                    value={this.state.sell[4]}\n                    action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                    placeholder=\"# of Stocks\"\n                    onChange={event => this.setState({ sell: update(this.state.sell, {\n                      4: {$set: event.target.value}\n                    })})}\n                    fluid\n                    size=\"small\"\n                    />\n                </Form>\n                <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"tron\")} basic color=\"teal\">Sell All</Button>\n              </Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      );\n    }\n\n  renderTableTech() {\n    const {\n      apple,\n      google,\n      microsoft,\n      facebook,\n      dropbox\n    } = this.props.techStock;\n\n    const {\n      apple: applePrices,\n      google: googlePrices,\n      microsoft: microsoftPrices,\n      facebook: facebookPrices,\n      dropbox: dropboxPrices\n    } = this.props.techPrices\n\n    const {\n      techPrices\n    } = this.props;\n\n    const appleColor = getColorArrow(apple.price, this.props.techPrices[\"apple\"]);\n    const dropboxColor = getColorArrow(dropbox.price, dropboxPrices);\n    const facebookColor = getColorArrow(facebook.price, facebookPrices);\n    const microsoftColor = getColorArrow(microsoft.price, microsoftPrices);\n    const googleColor = getColorArrow(google.price, googlePrices);\n\n    return (\n      <div>\n        { this.state.error && \n        <Message error header={this.state.errorHeader} content={this.state.errorMessage} />\n        }\n        \n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Company Name</Table.HeaderCell>\n            <Table.HeaderCell>Price</Table.HeaderCell>\n            <Table.HeaderCell>Shares Owned</Table.HeaderCell>\n            <Table.HeaderCell>Total Value</Table.HeaderCell>\n            <Table.HeaderCell>Buy Shares</Table.HeaderCell>\n            <Table.HeaderCell>Sell Shares</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>Pear</Table.Cell>\n            <Table.Cell style={{ color: appleColor.color}}>\n               ${castToDollar(apple.price)} {appleColor.arrow != \"\" ? <Icon name={appleColor.arrow} /> : <p></p>}\n                <Button basic color=\"blue\" onClick={this.handleClick(\"apple\", \"tech\")}>Price History</Button>\n            </Table.Cell>\n            <Table.Cell>{apple.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(apple.totalValue)}</Table.Cell>\n            <Table.Cell>\n                <Form onSubmit={this.onSubmitBuy(1, \"apple\", this.state.buy[1])}>\n                <Input\n                  value={this.state.buy[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    1: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"apple\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(1, \"apple\", this.state.sell[1])}>\n                <Input\n                  value={this.state.sell[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    1: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"apple\")} basic color=\"teal\">Sell All</Button>\n            \n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Googol</Table.Cell>\n             <Table.Cell style={{ color: googleColor.color}}>${castToDollar(google.price)} {googleColor.arrow != \"\" ? <Icon name={googleColor.arrow} /> : <p></p>}\n             <Button basic color=\"blue\" onClick={this.handleClick(\"google\", \"tech\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{google.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(google.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(2, \"google\", this.state.buy[2])}>\n                <Input\n                  value={this.state.buy[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    2: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"google\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(2, \"google\", this.state.sell[2])}>\n                <Input\n                  value={this.state.sell[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    2: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"google\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Wicrodoft</Table.Cell>\n            <Table.Cell style={{ color: microsoftColor.color}}>${castToDollar(microsoft.price)} {microsoftColor.arrow != \"\" ? <Icon name={microsoftColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"microsoft\", \"tech\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{microsoft.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(microsoft.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(3, \"microsoft\", this.state.buy[3])}>\n                <Input\n                  value={this.state.buy[3]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    3: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"microsoft\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(3, \"microsoft\", this.state.sell[3])}>\n                <Input\n                  value={this.state.sell[3]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    3: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"microsoft\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Facenovel</Table.Cell>\n            <Table.Cell style={{ color: facebookColor.color}}>${castToDollar(facebook.price)} {facebookColor.arrow != \"\" ? <Icon name={facebookColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"facebook\", \"tech\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{facebook.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(facebook.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(4, \"facebook\", this.state.buy[4])}>\n                <Input\n                  value={this.state.buy[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    4: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"facebook\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(4, \"facebook\", this.state.sell[4])}>\n                <Input\n                  value={this.state.sell[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    4: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"facebook\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Boxdrop</Table.Cell>\n            <Table.Cell style={{ color: dropboxColor.color}}>${castToDollar(dropbox.price)} {dropboxColor.arrow != \"\" ? <Icon name={dropboxColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"dropbox\", \"tech\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{dropbox.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(dropbox.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(5, \"dropbox\", this.state.buy[5])}>\n                <Input\n                  value={this.state.buy[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    5: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"dropbox\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(5, \"dropbox\", this.state.sell[5])}>\n                <Input\n                  value={this.state.sell[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    5: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"dropbox\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n    );\n  }\n\n  renderTablePharma() {\n\n    const {\n      pfizer,\n      novartis,\n      hoffmann,\n      merck,\n      johnson\n    } = this.props.pharmaStock;\n\n    const {\n      pfizer: pfizerPrices,\n      novartis: novartisPrices,\n      hoffmann: hoffmannPrices,\n      merck: merckPrices,\n      johnson: johnsonPrices\n    } = this.props.pharmaPrices\n    \n    const pfizerColor = getColorArrow(pfizer.price, pfizerPrices);\n    const novartisColor = getColorArrow(novartis.price, novartisPrices);\n    const hoffmannColor = getColorArrow(hoffmann.price, hoffmannPrices);\n    const merckColor = getColorArrow(merck.price, merckPrices);\n    const johnsonColor = getColorArrow(johnson.price, johnsonPrices);\n    \n    return (  \n    <div>\n      { this.state.error && \n        <Message error header={this.state.errorHeader} content={this.state.errorMessage} />\n      }\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Company Name</Table.HeaderCell>\n            <Table.HeaderCell>Price</Table.HeaderCell>\n            <Table.HeaderCell>Shares Owned</Table.HeaderCell>\n            <Table.HeaderCell>Total Value</Table.HeaderCell>\n            <Table.HeaderCell>Buy Shares</Table.HeaderCell>\n            <Table.HeaderCell>Sell Shares</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>Fizzer</Table.Cell>\n            <Table.Cell style={{ color: pfizerColor.color}}>${castToDollar(pfizer.price)} {pfizerColor.arrow != \"\" ? <Icon name={pfizerColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"pfizer\", \"pharma\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{pfizer.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(pfizer.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(1, \"pfizer\", this.state.buy[1])}>\n                <Input\n                  value={this.state.buy[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    1: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"pfizer\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(1, \"pfizer\", this.state.sell[1])}>\n                <Input\n                  value={this.state.sell[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    1: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"pfizer\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>MedicinePlus</Table.Cell>\n            <Table.Cell style={{ color: novartisColor.color}}>${castToDollar(novartis.price)} {novartisColor.arrow != \"\" ? <Icon name={novartisColor.arrow} /> : <p></p> } <Button basic color=\"blue\" onClick={this.handleClick(\"novartis\", \"pharma\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{novartis.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(novartis.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(2, \"novartis\", this.state.buy[2])}>\n                <Input\n                  value={this.state.buy[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    2: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"novartis\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(2, \"novartis\", this.state.sell[2])}>\n                <Input\n                  value={this.state.sell[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    2: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"novartis\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Hofman-LaRose</Table.Cell>\n            <Table.Cell style={{ color: hoffmannColor.color}}>${castToDollar(hoffmann.price)} {hoffmannColor.arrow != \"\" ? <Icon name={hoffmannColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"hoffmann\", \"pharma\")}>Price History</Button> </Table.Cell>\n            <Table.Cell>{hoffmann.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(hoffmann.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(3, \"hoffmann\", this.state.buy[3])}>\n                <Input\n                  value={this.state.buy[3]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    3: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }}onClick={this.buyAll(\"hoffmann\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(3, \"hoffmann\", this.state.sell[3])}>\n                <Input\n                  value={this.state.sell[3]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    3: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"hoffmann\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Murck & Co.</Table.Cell>\n            <Table.Cell style={{ color: merckColor.color}}>${castToDollar(merck.price)} {merckColor.arrow != \"\" ? <Icon name={merckColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"merck\", \"pharma\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{merck.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(merck.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(4, \"merck\", this.state.buy[4])}>\n                <Input\n                  value={this.state.buy[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    4: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"merck\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(4, \"merck\", this.state.sell[4])}>\n                <Input\n                  value={this.state.sell[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    4: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"merck\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Johnny & Johnny</Table.Cell>\n            <Table.Cell style={{ color: johnsonColor.color}}>${castToDollar(johnson.price)} {johnsonColor.arrow != \"\" ? <Icon name={johnsonColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"johnson\", \"pharma\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{johnson.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(johnson.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(5, \"johnson\", this.state.buy[5])}>\n                <Input\n                  value={this.state.buy[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    5: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"johnson\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(5, \"johnson\", this.state.sell[5])}>\n                <Input\n                  value={this.state.sell[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    5: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"johnson\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n    );\n  }\n\n  renderTableClothing() {\n\n    const {\n      dior,\n      nike,\n      adidas,\n      gucci,\n      hermes\n    } = this.props.clothingStock;\n\n    const {\n      dior: diorPrices,\n      nike: nikePrices,\n      adidas: adidasPrices,\n      gucci: gucciPrices,\n      hermes: hermesPrices\n    } = this.props.clothingPrices\n\n    const diorColor = getColorArrow(dior.price, diorPrices);\n    const nikeColor = getColorArrow(nike.price, nikePrices);\n    const adidasColor = getColorArrow(adidas.price, adidasPrices);\n    const gucciColor = getColorArrow(gucci.price, gucciPrices);\n    const hermesColor = getColorArrow(hermes.price, hermesPrices);\n\n\n    return (\n    <div>\n        { this.state.error && \n        <Message error header={this.state.errorHeader} content={this.state.errorMessage} />\n        }\n\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Company Name</Table.HeaderCell>\n            <Table.HeaderCell>Price</Table.HeaderCell>\n            <Table.HeaderCell>Shares Owned</Table.HeaderCell>\n            <Table.HeaderCell>Total Value</Table.HeaderCell>\n            <Table.HeaderCell>Buy Shares</Table.HeaderCell>\n            <Table.HeaderCell>Sell Shares</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>Doir</Table.Cell>\n            <Table.Cell style={{ color: diorColor.color}}>${castToDollar(dior.price)} {diorColor.arrow != \"\" ? <Icon name={diorColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"dior\", \"clothing\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{dior.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(dior.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(1, \"dior\", this.state.buy[1])}>\n                <Input\n                  value={this.state.buy[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    1: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"dior\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(1, \"dior\", this.state.sell[1])}>\n                <Input\n                  value={this.state.sell[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    1: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"dior\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Nikke</Table.Cell>\n            <Table.Cell style={{ color: nikeColor.color}}>${castToDollar(nike.price)} {nikeColor.arrow != \"\" ? <Icon name={nikeColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"nike\", \"clothing\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{nike.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(nike.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(2, \"nike\", this.state.buy[2])}>\n                <Input\n                  value={this.state.buy[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    2: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"nike\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(2, \"nike\", this.state.sell[2])}>\n                <Input\n                  value={this.state.sell[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    2: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"nike\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Addiddas</Table.Cell>\n            <Table.Cell style={{ color: adidasColor.color}}>${castToDollar(adidas.price)} {adidasColor.arrow != \"\" ? <Icon name={adidasColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"adidas\", \"clothing\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{adidas.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(adidas.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(3, \"adidas\", this.state.buy[3])}>\n                <Input\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    3: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"adidas\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(3, \"adidas\", this.state.sell[3])}>\n                <Input\n                  value={this.state.sell[3]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    3: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"adidas\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Guchi</Table.Cell>\n            <Table.Cell style={{ color: gucciColor.color}}>${castToDollar(gucci.price)} {gucciColor.arrow != \"\" ? <Icon name={gucciColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"gucci\", \"clothing\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{gucci.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(gucci.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(4, \"gucci\", this.state.buy[4])}>\n                <Input\n                  value={this.state.buy[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    4: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"gucci\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(4, \"gucci\", this.state.sell[4])}>\n                <Input\n                  value={this.state.sell[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    4: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"gucci\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Harmes</Table.Cell>\n            <Table.Cell style={{ color: hermesColor.color}}>${castToDollar(hermes.price)} {hermesColor.arrow != \"\" ? <Icon name={hermesColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"hermes\", \"clothing\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{hermes.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(hermes.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(5, \"hermes\", this.state.buy[5])}>\n                <Input\n                  value={this.state.buy[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    5: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"hermes\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(5, \"hermes\", this.state.sell[5])}>\n                <Input\n                  value={this.state.sell[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    5: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"hermes\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n    );\n  }\n\n  renderTableFood() {\n    const {\n      cargill,\n      nestle,\n      pepsi,\n      archer,\n      sysco\n    } = this.props.foodStock;\n\n    const {\n      cargill: cargillPrices,\n      nestle: nestlePrices,\n      pepsi: pepsiPrices,\n      archer: archerPrices,\n      sysco: syscoPrices\n    } = this.props.foodPrices;\n\n    const cargillColor = getColorArrow(cargill.price, cargillPrices);\n    const nestleColor = getColorArrow(nestle.price, nestlePrices);\n    const pepsiColor = getColorArrow(pepsi.price, pepsiPrices);\n    const archerColor = getColorArrow(archer.price, archerPrices);\n    const syscoColor = getColorArrow(sysco.price, syscoPrices);\n\n    return (\n    <div>\n        { this.state.error && \n        <Message error header={this.state.errorHeader} content={this.state.errorMessage} />\n        }\n\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Company Name</Table.HeaderCell>\n            <Table.HeaderCell>Price</Table.HeaderCell>\n            <Table.HeaderCell>Shares Owned</Table.HeaderCell>\n            <Table.HeaderCell>Total Value</Table.HeaderCell>\n            <Table.HeaderCell>Buy Shares</Table.HeaderCell>\n            <Table.HeaderCell>Sell Shares</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>Cardgill</Table.Cell>\n            <Table.Cell style={{ color: cargillColor.color}}>${castToDollar(cargill.price)} {cargillColor.arrow != \"\" ? <Icon name={cargillColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"cargill\", \"food\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{cargill.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(cargill.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(1, \"cargill\", this.state.buy[1])}>\n                <Input\n                  value={this.state.buy[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    1: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"cargill\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(1, \"cargill\", this.state.sell[1])}>\n                <Input\n                  value={this.state.sell[1]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    1: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"cargill\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Nestel</Table.Cell>\n            <Table.Cell style={{ color: nestleColor.color}}>${castToDollar(nestle.price)} {nestleColor.arrow != \"\" ? <Icon name={nestleColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"nestle\", \"food\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{nestle.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(nestle.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(2, \"nestle\", this.state.buy[2])}>\n                <Input\n                  value={this.state.buy[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    2: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"nestle\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(2, \"nestle\", this.state.sell[2])}>\n                <Input\n                  value={this.state.sell[2]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    2: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"nestle\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>PepisCo</Table.Cell>\n            <Table.Cell style={{ color: pepsiColor.color}}>${castToDollar(pepsi.price)} {pepsiColor.arrow != \"\" ? <Icon name={pepsiColor.arrow} /> : <p></p>} <Button basic color=\"blue\" onClick={this.handleClick(\"pepsi\", \"food\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{pepsi.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(pepsi.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(3, \"pepsi\", this.state.buy[3])}>\n                <Input\n                  value={this.state.buy[3]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    3: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"pepsi\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(3, \"pepsi\", this.state.sell[3])}>\n                <Input\n                  value={this.state.sell[3]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    3: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"pepsi\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Cooca-Coola</Table.Cell>\n            <Table.Cell style={{ color: archerColor.color }}>${castToDollar(archer.price)} {archerColor.arrow != \"\" ? <Icon name={archerColor.arrow} /> : <p></p> }\n            <Button basic color=\"blue\" onClick={this.handleClick(\"archer\", \"food\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{archer.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(archer.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(4, \"archer\", this.state.buy[4])}>\n                <Input\n                  value={this.state.buy[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  fluid\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    4: {$set: event.target.value}\n                  })})}\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"archer\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(4, \"archer\", this.state.sell[4])}>\n                <Input\n                  value={this.state.sell[4]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    4: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"archer\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Sisco</Table.Cell>\n            <Table.Cell style={{ color: syscoColor.color}}>${castToDollar(sysco.price)} {syscoColor.arrow != \"\" ? <Icon name={syscoColor.arrow} /> : <p></p>} \n            <Button basic color=\"blue\" onClick={this.handleClick(\"sysco\", \"food\")}>Price History</Button></Table.Cell>\n            <Table.Cell>{sysco.sharesOwned}</Table.Cell>\n            <Table.Cell>${castToDollar(sysco.totalValue)}</Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitBuy(5, \"sysco\", this.state.buy[5])}>\n                <Input\n                  value={this.state.buy[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Buy', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ buy: update(this.state.buy, {\n                    5: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.buyAll(\"sysco\")} basic color=\"teal\">Buy All</Button>\n            </Table.Cell>\n            <Table.Cell>\n              <Form onSubmit={this.onSubmitSell(5, \"sysco\", this.state.sell[5])}>\n                <Input\n                  value={this.state.sell[5]}\n                  action={{ color: 'teal', labelPosition: 'right', content: 'Sell', icon:\"cart\" }}\n                  placeholder=\"# of Stocks\"\n                  onChange={event => this.setState({ sell: update(this.state.sell, {\n                    5: {$set: event.target.value}\n                  })})}\n                  fluid\n                  size=\"small\"\n                  />\n              </Form>\n              <Button fluid style={{marginTop: \"5px\" }} onClick={this.sellAll(\"sysco\")} basic color=\"teal\">Sell All</Button>\n            </Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n    );\n  }\n\n  renderGraph(stock, type) {\n    const {\n          techStock,\n          pharmaStock,\n          foodStock,\n          clothingStock,\n          cryptoStock,\n          cryptoPrices,\n          techPrices,\n          foodPrices,\n          clothingPrices,\n          pharmaPrices\n    } = this.props;\n\n    var obj = {};\n    var i;\n     \n    if (type === \"tech\") {\n      for (i = 0; i < this.props.techPrices[stock].length; i++) {\n        obj[i] = castToDollar(techPrices[stock][i]);\n      }\n      obj[i] = castToDollar(techStock[stock].price);\n    } \n    if (type === \"food\") {\n      for (i = 0; i < this.props.foodPrices[stock].length; i++) {\n        obj[i] = castToDollar(foodPrices[stock][i]);\n      }\n      obj[i + 1] = castToDollar(foodStock[stock].price);\n    } \n    if (type === \"pharma\") {\n      for (i = 0; i < this.props.pharmaPrices[stock].length; i++) {\n        obj[i] = castToDollar(pharmaPrices[stock][i]);\n      }\n      obj[i + 1] = castToDollar(pharmaStock[stock].price);\n    } \n    if (type === \"clothing\") {\n      for (i = 0; i < this.props.clothingPrices[stock].length; i++) {\n        obj[i] = castToDollar(clothingPrices[stock][i]);\n      }\n      obj[i + 1] = castToDollar(clothingStock[stock].price);\n    }\n    if (type === \"crypto\") {\n      for (i = 0; i < this.props.cryptoPrices[stock].length; i++) {\n        obj[i] = castToDollar(cryptoPrices[stock][i]);\n      }\n      obj[i + 1] = castToDollar(cryptoStock[stock].price);\n    }\n    return <LineChart thousands=\",\" prefix=\"$\" xtitle=\"Turn\" ytitle=\"Price\" data={obj} />;\n  }\n\n  close = () => {\n    this.setState({ open: false });\n  }\n\n  render() {\n    const panes = [\n      { menuItem: 'Tech', render: () => <Tab.Pane>{this.renderTableTech()}</Tab.Pane> },\n      { menuItem: 'Pharma', render: () => <Tab.Pane>{this.renderTablePharma()}</Tab.Pane> },\n      { menuItem: 'Food', render: () => <Tab.Pane>{this.renderTableFood()}</Tab.Pane> },\n      { menuItem: 'Clothing', render: () => <Tab.Pane>{this.renderTableClothing()} </Tab.Pane> },\n      { menuItem: 'Crypto', render: () => <Tab.Pane>{this.renderTableCrypto()} </Tab.Pane> }\n   ]\n    return (\n      <div>\n        <Link to=\"/\">\n        </Link>\n        <Tab panes={panes} />\n        <Modal open={this.state.open} onClose={this.close}>\n        <Modal.Header>Stock History</Modal.Header>\n        <Modal.Content>\n          {this.renderGraph(this.state.stock, this.state.type)}\n        </Modal.Content>\n        <Modal.Actions>\n          <Button primary onClick={this.close}>\n            <Icon name='remove' /> Close\n          </Button>\n        </Modal.Actions>\n      </Modal>\n      </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { stats: state.stats, events: state.events, techStock: state.techStock, pharmaStock: state.pharmaStock, foodStock: state.foodStock, clothingStock: state.clothingStock, techPrices: state.techPrices, foodPrices: state.foodPrices, pharmaPrices: state.pharmaPrices, clothingPrices: state.clothingPrices, cryptoPrices: state.cryptoPrices, cryptoStock: state.cryptoStock };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addNetWorth, subtractNetWorth, addEvent, boughtTechStock, soldTechStock, boughtFoodStock, soldFoodStock, boughtClothingStock, soldClothingStock, boughtPharmaStock, soldPharmaStock, boughtCryptoStock, soldCryptoStock }\n)(Investment);"]},"metadata":{},"sourceType":"module"}